<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Clide</name>
    </assembly>
    <members>
        <member name="T:Clide.Settings">
            <summary>
            Helper base class that can be used to provide transparent loading and saving of settings. 
            </summary>
            <remarks>
            Derived classes typically expose an interface that is exported to the composition container, 
            and declares an importing constructor that receives the settings manager, which is already 
            exported in the environment by the runtime.
            </remarks>
            <example>
            The following is an example of a settings class:
            <code>
            [Settings]
            public class ServerSettings : Settings, IServerSettings
            {
                public ServerSettings(ISettingsManager manager)
                    : base(manager)
                {
                }
                
                public string Name { get; set; }
                public int Port { get; set; }
            }
            </code>
            Note how the class specifies what is the exported settings interface 
            for other consuming code. Also, the imported settings manager is passed 
            to the base class which takes care of reading and saving the state as 
            necessary.
            </example>
        </member>
        <member name="T:Clide.ISettings">
            <summary>
            Interface used by settings that leverage the <see cref="T:Clide.OptionsPage`2"/> 
            base class for Tools|Options extensibility, and which are annotated with the <see cref="T:Clide.SettingsAttribute"/>.
            </summary>
        </member>
        <member name="M:Clide.ISettings.Save(System.Boolean)">
            <summary>
            Explicitly saves the settings. This happens automatically 
            also when using the <see cref="M:System.ComponentModel.IEditableObject.BeginEdit"/> 
            and <see cref="M:System.ComponentModel.IEditableObject.EndEdit"/> methods.
            </summary>
            <param name="saveDefaults">The optional parameter can be used 
            to forcely persist all properties, including those that 
            only have default values.</param>
        </member>
        <member name="M:Clide.Settings.#ctor(Clide.ISettingsManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.Settings"/> class.
            </summary>
            <param name="manager">The settings manager that will read and save data for this instance.</param>
        </member>
        <member name="M:Clide.Settings.BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:Clide.Settings.CancelEdit">
            <summary>
            Discards changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit" /> call.
            </summary>
        </member>
        <member name="M:Clide.Settings.EndEdit">
            <summary>
            Pushes changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit"/> or <see cref="M:System.ComponentModel.IBindingList.AddNew"/> call into the underlying object.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Clide.Settings.BeginInit">
            <summary>
            Signals the object that initialization is starting.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Clide.Settings.EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Clide.Settings.Save(System.Boolean)">
            <summary>
            Saves the current settings class, optionally specifying whether to 
            forcedly persist values which have their defaults only.
            </summary>
        </member>
        <member name="M:Clide.Settings.OnSaving">
            <summary>
            Called before saving this instance to the settings store.
            </summary>
        </member>
        <member name="M:Clide.Settings.OnSaved">
            <summary>
            Called after saving this instance to the settings store.
            </summary>
        </member>
        <member name="M:Clide.Settings.RaisePropertyChanged(System.String)">
            <summary>
            Manually raises the property changed. Not needed if using automatic 
            properties together with the Property Changed nuget package
            (https://www.nuget.org/packages/PropertyChanged.Fody/)
            </summary>
            <param name="propertyName">Name of the property that changed.</param>
        </member>
        <member name="E:Clide.Settings.Initialized">
            <summary>
            Occurs when initialization of the component is completed.
            </summary>
        </member>
        <member name="E:Clide.Settings.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Clide.Settings.IsInitialized">
            <summary>
            Gets a value indicating whether the component is initialized.
            </summary>
            <returns>true to indicate the component has completed initialization; otherwise, false. </returns>
        </member>
        <member name="T:Clide.Commands.CommandInterceptorAttribute">
            <summary>
            Attribute that must be placed on command interceptors in order to 
            use the <see cref="M:Clide.Commands.ICommandManager.AddInterceptors"/> method.
            </summary>
        </member>
        <member name="T:Clide.CommonComposition.ComponentAttribute">
            <summary>
            Marks the decorated class as a component that will be registered
            for composition
            </summary>
        </member>
        <member name="M:Clide.CommonComposition.ComponentAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.CommonComposition.ComponentAttribute"/> class, 
            marking the decorated class as a component that will be registered 
            for composition.
            </summary>
        </member>
        <member name="P:Clide.CommonComposition.ComponentAttribute.IsSingleton">
            <summary>
            Gets or sets a value indicating whether this component should be treated as a singleton 
            or single instance within a given composition scope (i.e. a container). 
            </summary>
            <remarks>
            Defaults to <see langword="false"/>, meaning every component depending on the 
            annotated class will be given a new instance of it within a given scope, 
            rather than being reused.
            </remarks>
        </member>
        <member name="M:Clide.Commands.CommandInterceptorAttribute.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.Commands.CommandInterceptorAttribute"/> class 
            from a dictionary of values
            </summary>
        </member>
        <member name="M:Clide.Commands.CommandInterceptorAttribute.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.Commands.CommandInterceptorAttribute"/> class.
            </summary>
            <param name="packageGuid">Gets the GUID of the package that provides the command to intercept.</param>
            <param name="groupGuid">The group GUID of the intercepted command.</param>
            <param name="commandId">The command id of the intercepted command.</param>
        </member>
        <member name="P:Clide.Commands.CommandInterceptorAttribute.PackageId">
            <summary>
            Gets the GUID of the package that provides the command to intercept.
            </summary>
        </member>
        <member name="P:Clide.Commands.CommandInterceptorAttribute.CommandId">
            <summary>
            Gets the command id of the command to intercept.
            </summary>
        </member>
        <member name="P:Clide.Commands.CommandInterceptorAttribute.GroupId">
            <summary>
            Gets the group id of the command to intercept.
            </summary>
        </member>
        <member name="T:Clide.Commands.ICommandInterceptor">
            <summary>
            Interface implemented by components that want to 
            provide custom behavior before and after the 
            execution of an arbitrary command in Visual Studio.
            </summary>
        </member>
        <member name="M:Clide.Commands.ICommandInterceptor.BeforeExecute">
            <summary>
            Invoked before the target command is executed.
            </summary>
        </member>
        <member name="M:Clide.Commands.ICommandInterceptor.AfterExecute">
            <summary>
            Invoked after the target command is executed.
            </summary>
        </member>
        <member name="T:Clide.Composition.FallbackServiceLocator">
            <summary>
            Provides component location from a primary and a fallback locator.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase">
            <summary>
            This class is a helper that provides a default implementation
            for most of the methods of <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ServiceLocation.IServiceLocator">
            <summary>
            The generic Service Locator interface. This interface is used
            to retrieve services (instances identified by type and optional
            name) from a container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetInstance(System.Type)">
            <summary>
            Get an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is an error resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetInstance(System.Type,System.String)">
            <summary>
            Get an instance of the given named <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <param name="key">Name the object was registered with.</param>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is an error resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetAllInstances(System.Type)">
            <summary>
            Get all instances of the given <paramref name="serviceType"/> currently
            registered in the container.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>A sequence of instances of the requested <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetInstance``1">
            <summary>
            Get an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetInstance``1(System.String)">
            <summary>
            Get an instance of the given named <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <param name="key">Name the object was registered with.</param>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetAllInstances``1">
            <summary>
            Get all instances of the given <typeparamref name="TService"/> currently
            registered in the container.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>A sequence of instances of the requested <typeparamref name="TService"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetService(System.Type)">
            <summary>
            Implementation of <see cref="M:System.IServiceProvider.GetService(System.Type)"/>.
            </summary>
            <param name="serviceType">The requested service.</param>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is an error in resolving the service instance.</exception>
            <returns>The requested object.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(System.Type)">
            <summary>
            Get an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is an error resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(System.Type,System.String)">
            <summary>
            Get an instance of the given named <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <param name="key">Name the object was registered with.</param>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is an error resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetAllInstances(System.Type)">
            <summary>
            Get all instances of the given <paramref name="serviceType"/> currently
            registered in the container.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>A sequence of instances of the requested <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance``1">
            <summary>
            Get an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance``1(System.String)">
            <summary>
            Get an instance of the given named <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <param name="key">Name the object was registered with.</param>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetAllInstances``1">
            <summary>
            Get all instances of the given <typeparamref name="TService"/> currently
            registered in the container.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>A sequence of instances of the requested <typeparamref name="TService"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.DoGetInstance(System.Type,System.String)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of resolving
            the requested service instance.
            </summary>
            <param name="serviceType">Type of instance requested.</param>
            <param name="key">Name of registered service you want. May be null.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.DoGetAllInstances(System.Type)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
            resolving all the requested service instances.
            </summary>
            <param name="serviceType">Type of service requested.</param>
            <returns>Sequence of service instance objects.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.FormatActivationExceptionMessage(System.Exception,System.Type,System.String)">
            <summary>
            Format the exception message for use in an <see cref="T:Microsoft.Practices.ServiceLocation.ActivationException"/>
            that occurs while resolving a single service.
            </summary>
            <param name="actualException">The actual exception thrown by the implementation.</param>
            <param name="serviceType">Type of service requested.</param>
            <param name="key">Name requested.</param>
            <returns>The formatted exception message string.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.FormatActivateAllExceptionMessage(System.Exception,System.Type)">
            <summary>
            Format the exception message for use in an <see cref="T:Microsoft.Practices.ServiceLocation.ActivationException"/>
            that occurs while resolving multiple service instances.
            </summary>
            <param name="actualException">The actual exception thrown by the implementation.</param>
            <param name="serviceType">Type of service requested.</param>
            <returns>The formatted exception message string.</returns>
        </member>
        <member name="M:Clide.Composition.FallbackServiceLocator.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.Composition.FallbackServiceLocator"/> class.
            </summary>
            <param name="primary">The primary service locator.</param>
            <param name="fallback">The fallback service locator.</param>
        </member>
        <member name="M:Clide.Composition.FallbackServiceLocator.DoGetAllInstances(System.Type)">
            <summary>
            Aggregates the results of the primary and secondary locators.
            </summary>
        </member>
        <member name="M:Clide.Composition.FallbackServiceLocator.DoGetInstance(System.Type,System.String)">
            <summary>
            Returns the instance from the primary locator if any, otherwise, from the fallback.
            </summary>
        </member>
        <member name="T:Clide.Composition.ExportsServiceLocator">
            <summary>
            Exposes MEF exports as a service locator.
            </summary>
        </member>
        <member name="M:Clide.Composition.ExportsServiceLocator.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.Composition.ExportsServiceLocator"/> class.
            </summary>
            <param name="provider">The exports provider.</param>
        </member>
        <member name="M:Clide.Composition.ExportsServiceLocator.DoGetAllInstances(System.Type)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
            resolving all the requested service instances.
            </summary>
            <param name="serviceType">Type of service requested.</param>
            <returns>
            Sequence of service instance objects.
            </returns>
        </member>
        <member name="M:Clide.Composition.ExportsServiceLocator.DoGetInstance(System.Type,System.String)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of resolving
            the requested service instance.
            </summary>
            <param name="serviceType">Type of instance requested.</param>
            <param name="key">Name of registered service you want. May be null.</param>
            <returns>
            The requested service instance.
            </returns>
        </member>
        <member name="T:Clide.Diagnostics.TextTraceListener">
            <summary>
            A custom <see cref="T:System.Diagnostics.TraceListener"/> that writes simple text rendering for traces.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TextTraceListener.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.Diagnostics.TextTraceListener"/> class.
            </summary>
            <param name="writer">The writer to write traces to.</param>
        </member>
        <member name="M:Clide.Diagnostics.TextTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Writes trace information, a message, and event information to the listener specific output.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TextTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Writes trace information, a formatted array of objects and event information to the listener specific output.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TextTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Always skips writing data traces.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TextTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>
            Always skips writing data traces.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TextTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
            <summary>
            Always skips writing event traces without messages.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TextTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
            <summary>
            Always skips writing transfer traces.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TextTraceListener.Write(System.String)">
            <summary>
            Writes the specified message to the underlying <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TextTraceListener.WriteLine(System.String)">
            <summary>
            Writes the specified message to the underlying <see cref="T:System.IO.TextWriter"/>, followed by a line terminator.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TextTraceListener.DoTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.String)">
            <summary>
            After determining if tracing should be performed according to the configured <see cref="P:System.Diagnostics.TraceListener.Filter"/>, 
            issues the <see cref="M:Clide.Diagnostics.TextTraceListener.WriteLine(System.String)"/> call.
            </summary>
            <param name="eventCache">The event cache that contains extra information about the trace context.</param>
            <param name="source">The trace source name that issued the trace.</param>
            <param name="eventType">Type of the event.</param>
            <param name="message">The message to trace.</param>
            <remarks>
            <see cref="F:System.Diagnostics.TraceEventType.Stop"/> traces are ignored, as well as 
            </remarks>
        </member>
        <member name="T:Clide.Diagnostics.ITracer">
            <summary>
            Interface used by the application components to log messages.
            </summary>
            <nuget id="Tracer.Interfaces" />
        </member>
        <member name="M:Clide.Diagnostics.ITracer.Trace(System.Diagnostics.TraceEventType,System.Object)">
            <summary>
            Traces the specified message with the given <see cref="T:System.Diagnostics.TraceEventType"/>.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracer.Trace(System.Diagnostics.TraceEventType,System.String,System.Object[])">
            <summary>
            Traces the specified formatted message with the given <see cref="T:System.Diagnostics.TraceEventType"/>.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracer.Trace(System.Diagnostics.TraceEventType,System.Exception,System.Object)">
            <summary>
            Traces an exception with the specified message and <see cref="T:System.Diagnostics.TraceEventType"/>.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracer.Trace(System.Diagnostics.TraceEventType,System.Exception,System.String,System.Object[])">
            <summary>
            Traces an exception with the specified formatted message and <see cref="T:System.Diagnostics.TraceEventType"/>.
            </summary>
        </member>
        <member name="T:Clide.Diagnostics.ITracerExtensions">
            <summary>
            Provides usability overloads for tracing to a <see cref="T:Clide.Diagnostics.ITracer"/>.
            </summary>
            <nuget id="Tracer.Interfaces"/>
        </member>
        <member name="M:Clide.Diagnostics.ITracerExtensions.Critical(Clide.Diagnostics.ITracer,System.Object)">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Critical"/> with the given message;
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerExtensions.Critical(Clide.Diagnostics.ITracer,System.String,System.Object[])">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Critical"/> with the given format string and arguments.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerExtensions.Critical(Clide.Diagnostics.ITracer,System.Exception,System.Object)">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Critical"/> with the given exception and message.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerExtensions.Critical(Clide.Diagnostics.ITracer,System.Exception,System.String,System.Object[])">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Critical"/> with the given exception, format string and arguments.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerExtensions.Error(Clide.Diagnostics.ITracer,System.Object)">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Error"/> with the given message;
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerExtensions.Error(Clide.Diagnostics.ITracer,System.String,System.Object[])">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Error"/> with the given format string and arguments.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerExtensions.Error(Clide.Diagnostics.ITracer,System.Exception,System.Object)">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Error"/> with the given exception and message.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerExtensions.Error(Clide.Diagnostics.ITracer,System.Exception,System.String,System.Object[])">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Error"/> with the given exception, format string and arguments.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerExtensions.Warn(Clide.Diagnostics.ITracer,System.Object)">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Warning"/> with the given message;
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerExtensions.Warn(Clide.Diagnostics.ITracer,System.String,System.Object[])">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Warning"/> with the given format string and arguments.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerExtensions.Warn(Clide.Diagnostics.ITracer,System.Exception,System.Object)">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Warning"/> with the given exception and message.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerExtensions.Warn(Clide.Diagnostics.ITracer,System.Exception,System.String,System.Object[])">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Warning"/> with the given exception, format string and arguments.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerExtensions.Info(Clide.Diagnostics.ITracer,System.Object)">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Information"/> with the given message;
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerExtensions.Info(Clide.Diagnostics.ITracer,System.String,System.Object[])">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Information"/> with the given format string and arguments.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerExtensions.Info(Clide.Diagnostics.ITracer,System.Exception,System.Object)">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Information"/> with the given exception and message.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerExtensions.Info(Clide.Diagnostics.ITracer,System.Exception,System.String,System.Object[])">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Information"/> with the given exception, format string and arguments.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerExtensions.Verbose(Clide.Diagnostics.ITracer,System.Object)">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Verbose"/> with the given message;
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerExtensions.Verbose(Clide.Diagnostics.ITracer,System.String,System.Object[])">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Verbose"/> with the given format string and arguments.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerExtensions.Verbose(Clide.Diagnostics.ITracer,System.Exception,System.Object)">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Verbose"/> with the given exception and message.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerExtensions.Verbose(Clide.Diagnostics.ITracer,System.Exception,System.String,System.Object[])">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Verbose"/> with the given exception, format string and arguments.
            </summary>
        </member>
        <member name="T:Clide.Diagnostics.ITracerManager">
            <summary>
            Manages <see cref="T:Clide.Diagnostics.ITracer"/> instances. Provides the implementation 
            for the <see cref="T:Clide.Diagnostics.Tracer"/> static facade class.
            </summary>
            <nuget id="Tracer.Interfaces"/>
            <devdoc>
            Adds our tracer configuration members.
            </devdoc>
        </member>
        <member name="M:Clide.Diagnostics.ITracerManager.Get(System.String)">
            <summary>
            Gets a tracer instance with the specified name.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerManager.AddListener(System.String,System.Diagnostics.TraceListener)">
            <summary>
            Adds a listener to the source with the given <paramref name="sourceName"/>.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerManager.RemoveListener(System.String,System.Diagnostics.TraceListener)">
            <summary>
            Removes a listener from the source with the given <paramref name="sourceName"/>.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerManager.RemoveListener(System.String,System.String)">
            <summary>
            Removes a listener from the source with the given <paramref name="sourceName"/>.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerManager.SetTracingLevel(System.String,System.Diagnostics.SourceLevels)">
            <summary>
            Sets the tracing level for the source with the given <paramref name="sourceName"/>
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.ITracerManager.GetSource(System.String)">
            <summary>
            Gets the underlying trace source of the given name.
            </summary>
        </member>
        <member name="T:Clide.Diagnostics.StartActivityExtension">
            <summary>
            Extensions to <see cref="T:Clide.Diagnostics.ITracer"/> for activity tracing.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.StartActivityExtension.StartActivity(Clide.Diagnostics.ITracer,System.String,System.Object[])">
            <summary>
            Starts a new activity scope.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.StartActivityExtension.StartActivity(Clide.Diagnostics.ITracer,System.String)">
            <summary>
            Starts a new activity scope.
            </summary>
        </member>
        <member name="T:Clide.Diagnostics.StartActivityExtension.TraceActivity">
            <devdoc>
            In order for activity tracing to happen, the trace source needs to 
            have <see cref="F:System.Diagnostics.SourceLevels.ActivityTracing"/> enabled.
            </devdoc>
        </member>
        <member name="T:Clide.Diagnostics.TracerManager">
            <summary>
            Implements the common tracer interface using <see cref="T:System.Diagnostics.TraceSource"/> instances. 
            </summary>
            <remarks>
            All tracing is performed asynchronously transparently for faster speed.
            </remarks>
            <nuget id="Tracer.SystemDiagnostics"/>
        </member>
        <member name="F:Clide.Diagnostics.TracerManager.DefaultSourceName">
            <summary>
            Implicit default trace source name which can be used to setup 
            global tracing and listeners.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TracerManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.Diagnostics.TracerManager"/> class.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TracerManager.Get(System.String)">
            <summary>
            Gets a tracer instance with the specified name.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TracerManager.GetSource(System.String)">
            <summary>
            Gets the underlying <see cref="T:System.Diagnostics.TraceSource"/> for the given name.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TracerManager.AddListener(System.String,System.Diagnostics.TraceListener)">
            <summary>
            Adds a listener to the source with the given <paramref name="sourceName"/>.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TracerManager.RemoveListener(System.String,System.Diagnostics.TraceListener)">
            <summary>
            Removes a listener from the source with the given <paramref name="sourceName"/>.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TracerManager.RemoveListener(System.String,System.String)">
            <summary>
            Removes a listener from the source with the given <paramref name="sourceName"/>.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TracerManager.SetTracingLevel(System.String,System.Diagnostics.SourceLevels)">
            <summary>
            Sets the tracing level for the source with the given <paramref name="sourceName"/>
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TracerManager.Dispose">
            <summary>
            Cleans up the manager, cancelling any pending tracing 
            messages.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TracerManager.Enqueue(System.Action)">
            <summary>
            Enqueues the specified trace action to be executed by the trace 
            async task.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TracerManager.CompositeFor(System.String)">
            <summary>
            Gets the list of trace source names that are used to inherit trace source logging for the given <paramref name="name"/>.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TracerManager.GetOrAdd(System.String,System.Func{System.String,System.Diagnostics.TraceSource})">
            <summary>
            Gets an AppDomain-cached trace source of the given name, or creates it. 
            This means that even if multiple libraries are using their own 
            trace manager instance, they will all still share the same 
            underlying sources.
            </summary>
        </member>
        <member name="T:Clide.Diagnostics.TracerManager.AggregateTracer">
            <summary>
            Logs to multiple tracers simulateously. Used for the 
            source "inheritance"
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TracerManager.AggregateTracer.Trace(System.Diagnostics.TraceEventType,System.Object)">
            <summary>
            Traces the specified message with the given <see cref="T:System.Diagnostics.TraceEventType"/>.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TracerManager.AggregateTracer.Trace(System.Diagnostics.TraceEventType,System.String,System.Object[])">
            <summary>
            Traces the specified formatted message with the given <see cref="T:System.Diagnostics.TraceEventType"/>.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TracerManager.AggregateTracer.Trace(System.Diagnostics.TraceEventType,System.Exception,System.Object)">
            <summary>
            Traces an exception with the specified message and <see cref="T:System.Diagnostics.TraceEventType"/>.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.TracerManager.AggregateTracer.Trace(System.Diagnostics.TraceEventType,System.Exception,System.String,System.Object[])">
            <summary>
            Traces an exception with the specified formatted message and <see cref="T:System.Diagnostics.TraceEventType"/>.
            </summary>
        </member>
        <member name="T:Clide.Diagnostics.TracerManager.DiagnosticsTracer.SourceNameReplacer">
            <summary>
            The TraceSource instance name matches the name of each of the "segments" 
            we built the aggregate source from. This means that when we trace, we issue 
            multiple trace statements, one for each. If a listener is added to (say) "*" 
            source name, all traces done through it will appear as coming from the source 
            "*", rather than (say) "Foo.Bar" which might be the actual source class. 
            This diminishes the usefulness of hierarchical loggers significantly, since 
            it now means that you need to add listeners too all trace sources you're 
            interested in receiving messages from, and all its "children" potentially, 
            some of them which might not have been created even yet. This is not feasible.
            Instead, since we issue the trace call to each trace source (which is what 
            enables the configurability of all those sources in the app.config file), 
            we need to fix the source name right before tracing, so that a configured 
            listener at "*" still receives as the source name the original (aggregate) one, 
            and not "*". This requires some private reflection, and a lock to guarantee 
            proper logging, but this decreases its performance. However, since we log 
            asynchronously, it's fine.
            </summary>
        </member>
        <member name="T:Clide.Diagnostics.Tracer">
            <summary>
            Provides access to tracer instances.
            </summary>
            <nuget id="Tracer.Interfaces" />
            <devdoc>
            Exposes the trace manager internally.
            </devdoc>
        </member>
        <member name="M:Clide.Diagnostics.Tracer.Initialize(Clide.Diagnostics.ITracerManager)">
            <summary>
            Provides the implementation for managing tracers.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.Tracer.Get``1">
            <summary>
            Gets a tracer instance with the full type name of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.Tracer.Get(System.Type)">
            <summary>
            Gets a tracer instance with the full type name of the <paramref name="type"/>.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.Tracer.Get(System.String)">
            <summary>
            Gets a tracer instance with the given name.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.Tracer.NameFor``1">
            <summary>
            Gets the tracer name for the given type.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.Tracer.NameFor(System.Type)">
            <summary>
            Gets the tracer name for the given type.
            </summary>
        </member>
        <member name="M:Clide.Diagnostics.Tracer.ReplaceManager(Clide.Diagnostics.ITracerManager)">
            <summary>
            Replaces the existing trace manager with the new one, and returns 
            the existing manager.
            </summary>
        </member>
        <member name="P:Clide.Diagnostics.Tracer.Manager">
            <summary>
            Gets the trace manager to manipulate the tracing level and listeners.
            </summary>
        </member>
        <member name="T:Clide.IErrorItem">
            <summary>
            Represents an error item in the error list
            </summary>
        </member>
        <member name="M:Clide.IErrorItem.Remove">
            <summary>
            Removes the item from the error list.
            </summary>
        </member>
        <member name="T:Clide.IErrorsManager">
            <summary>
            Provides members to interact with the Error List window
            </summary>
        </member>
        <member name="M:Clide.IErrorsManager.AddError(System.String,System.Action{Clide.IErrorItem})">
            <summary>
            Adds an error to the error list.
            </summary>
        </member>
        <member name="M:Clide.IErrorsManager.AddWarning(System.String,System.Action{Clide.IErrorItem})">
            <summary>
            Adds a warning to the error list.
            </summary>
        </member>
        <member name="M:Clide.IErrorsManager.ClearErrors">
            <summary>
            Clear the errors.
            </summary>
        </member>
        <member name="M:Clide.IErrorsManager.ShowErrors">
            <summary>
            Shows the errors.
            </summary>
        </member>
        <member name="T:Clide.CommonComposition.ComponentCatalog">
             <summary>
             A custom MEF catalog that provides the behavior of automatically exposing 
             the annotated components from the assemblies or types received 
             in the constructor.
             </summary>
             <remarks>
             <example>
             The following example registers all annotated components from the given 
             given assembly with the container configuration:
                 <code>
                 var configuration = new ContainerConfiguration();
                 configuration.RegisterComponents(typeof(IFoo).Assembly);
            
                 var container = configuration.CreateContainer();
                 </code>
             </example>
             </remarks>
        </member>
        <member name="M:Clide.CommonComposition.ComponentCatalog.#ctor(System.Reflection.Assembly[])">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.CommonComposition.ComponentCatalog"/> class.
            </summary>
            <param name="assemblies">The assemblies to scan for components.</param>
        </member>
        <member name="M:Clide.CommonComposition.ComponentCatalog.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.CommonComposition.ComponentCatalog"/> class.
            </summary>
            <param name="types">The types to scan for <see cref="T:Clide.CommonComposition.ComponentAttribute"/>-annotated ones.</param>
        </member>
        <member name="M:Clide.CommonComposition.ComponentCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.CommonComposition.ComponentCatalog"/> class.
            </summary>
            <param name="types">The types to scan for <see cref="T:Clide.CommonComposition.ComponentAttribute"/>-annotated ones.</param>
        </member>
        <member name="T:Clide.CommonComposition.DelegatingConstructorInfo">
            <summary>
            Provides a base <see cref="T:System.Reflection.ConstructorInfo"/> that can be 
            customized to expose tailored metadata for a constructor 
            to APIs that use reflection.
            </summary>
        </member>
        <member name="T:Clide.CommonComposition.DelegatingParameterInfo">
            <summary>
            Provides a base <see cref="T:System.Reflection.ParameterInfo"/> that can be 
            customized to expose tailored metadata for a parameter 
            to APIs that use reflection.
            </summary>
        </member>
        <member name="T:Clide.CommonComposition.NamedAttribute">
            <summary>
            Optional attribute that can be applied to components or dependencies 
            to specify the name of component or dependency.
            </summary>
        </member>
        <member name="M:Clide.CommonComposition.NamedAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.CommonComposition.NamedAttribute"/> class.
            </summary>
            <param name="name">The name of the component or dependency.</param>
        </member>
        <member name="P:Clide.CommonComposition.NamedAttribute.Name">
            <summary>
            Gets the name of the component or dependency.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ServiceLocation.ActivationException">
            <summary>
            The standard exception thrown when a ServiceLocator has an error in resolving an object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ActivationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ActivationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.
            </summary>
            <param name="message">
            The message that describes the error. 
             </param>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ActivationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception. 
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. 
            </param>
        </member>
        <member name="T:Microsoft.Practices.ServiceLocation.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ServiceLocation.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ServiceLocation.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ServiceLocation.Properties.Resources.ActivateAllExceptionMessage">
            <summary>
              Looks up a localized string similar to Activation error occured while trying to get all instances of type {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ServiceLocation.Properties.Resources.ActivationExceptionMessage">
            <summary>
              Looks up a localized string similar to Activation error occured while trying to get instance of type {0}, key &quot;{1}&quot;.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ServiceLocation.ServiceLocator">
            <summary>
            This class provides the ambient container for this application. If your
            framework defines such an ambient container, use ServiceLocator.Current
            to get it.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocator.SetLocatorProvider(Microsoft.Practices.ServiceLocation.ServiceLocatorProvider)">
            <summary>
            Set the delegate that is used to retrieve the current container.
            </summary>
            <param name="newProvider">Delegate that, when called, will return
            the current ambient container.</param>
        </member>
        <member name="P:Microsoft.Practices.ServiceLocation.ServiceLocator.Current">
            <summary>
            The current ambient container.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ServiceLocation.ServiceLocatorProvider">
            <summary>
            This delegate type is used to provide a method that will
            return the current container. Used with the <see cref="T:Microsoft.Practices.ServiceLocation.ServiceLocator"/>
            static accessor class.
            </summary>
            <returns>An <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>.</returns>
        </member>
        <member name="T:Clide.FallbackServiceProvider">
            <summary>
            A service provider that will try a primary service provider and 
            if the requested service type is not found, will fall back to 
            a secondary one.
            </summary>
        </member>
        <member name="M:Clide.FallbackServiceProvider.#ctor(System.IServiceProvider,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.FallbackServiceProvider"/> class.
            </summary>
            <param name="primary">The primary service provider.</param>
            <param name="fallback">The fallback service provider.</param>
        </member>
        <member name="M:Clide.FallbackServiceProvider.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType" />.-or- null if there is no service object of type <paramref name="serviceType" />.
            </returns>
        </member>
        <member name="T:Clide.IOptionsPageWindowFactory">
            <summary>
            Factory for options page windows. For internal use only.
            </summary>
        </member>
        <member name="M:Clide.IOptionsPageWindowFactory.CreateWindow(System.ComponentModel.IEditableObject,System.Windows.Controls.UserControl)">
            <summary>
            Creates the options page window for the given view control and underlying editable model.
            </summary>
        </member>
        <member name="T:Clide.IOutputWindowManager">
            <summary>
            Provides access to writing messages to the output window.
            </summary>
        </member>
        <member name="T:Clide.IFluentInterface">
            <summary>
            Interface that is used to build fluent interfaces and hides methods declared by <see cref="T:System.Object"/> from IntelliSense.
            </summary>
            <remarks>
            Code that consumes implementations of this interface should expect one of two things:
            <list type="number">
              <item>When referencing the interface from within the same solution (project reference), you will still see the methods this interface is meant to hide.</item>
              <item>When referencing the interface through the compiled output assembly (external reference), the standard Object methods will be hidden as intended.</item>
            </list>
            See http://bit.ly/ifluentinterface for more information.
            </remarks>
        </member>
        <member name="M:Clide.IFluentInterface.GetType">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.GetType"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:Clide.IFluentInterface.GetHashCode">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.GetHashCode"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:Clide.IFluentInterface.ToString">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.ToString"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:Clide.IFluentInterface.Equals(System.Object)">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.Equals(System.Object)"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:Clide.IOutputWindowManager.GetPane(System.Guid,System.String)">
            <summary>
            Gets or creates the output window pane with the given identifier and title.
            </summary>
            <param name="id">The identifier of the output window pane.</param>
            <param name="title">The title of the output window pane.</param>
            <returns>A <see cref="T:System.IO.TextWriter"/> that can be used to write to the output window.</returns>
        </member>
        <member name="T:Clide.IOutputWindowManagerExtensions">
            <summary>
            Usability overloads for <see cref="T:Clide.IOutputWindowManager"/>.
            </summary>
        </member>
        <member name="M:Clide.IOutputWindowManagerExtensions.GetPane(Clide.IOutputWindowManager,System.IServiceProvider)">
            <summary>
            Gets the output window pane corresponding to the package, using the package
            <c>GuidAttribute</c> attribute as the pane identifier. The pane title is
            determined by the package class <c>DisplayNameAttribute</c> or its namespace
            if no display name is provided.
            </summary>
            <param name="manager">The output window manager.</param>
            <param name="package">The owning package.</param>
            <returns></returns>
        </member>
        <member name="M:Clide.IOutputWindowManagerExtensions.GetPane(Clide.IOutputWindowManager,System.IServiceProvider,System.String)">
            <summary>
            Gets the output window pane corresponding to the package, using the package 
            <c>GuidAttribute</c> attribute as the pane identifier.
            </summary>
            <param name="manager">The output window manager.</param>
            <param name="package">The owning package.</param>
            <param name="title">The title of the pane.</param>
        </member>
        <member name="T:AmbientSingleton">
            <summary>
            Provides convenience factory methods for <see cref="T:AmbientSingleton`1"/> 
            so that type inference can be leveraged for the given default value. There 
            is no need to specify the T parameter for the Create method overloads.
            </summary>
        </member>
        <member name="M:AmbientSingleton.Create``1(System.String)">
            <summary>
            Creates an ambient singleton with no default value and a specific identifier.
            </summary>
            <typeparam name="T">Type of value held by the singleton.</typeparam>
            <param name="identifier">An identifier for the created singleton. Allows to reuse the ambient "variable" if needed.</param>
        </member>
        <member name="M:AmbientSingleton.Create``1(System.Guid)">
            <summary>
            Creates an ambient singleton with no default value and a specific identifier.
            </summary>
            <typeparam name="T">Type of value held by the singleton.</typeparam>
            <param name="identifier">An identifier for the created singleton. Allows to reuse the ambient "variable" if needed.</param>
        </member>
        <member name="M:AmbientSingleton.Create``1(``0)">
            <summary>
            Creates an ambient singleton with the specified default value.
            </summary>
            <typeparam name="T">Type of value held by the singleton. No need to specify it explicitly.</typeparam>
            <param name="defaultValue">The default value for the singleton.</param>
        </member>
        <member name="M:AmbientSingleton.Create``1(System.Func{``0})">
            <summary>
            Creates an ambient singleton with the specified default value factory.
            </summary>
            <typeparam name="T">Type of value held by the singleton. No need to specify it explicitly.</typeparam>
            <param name="defaultValueFactory">The default value factory for the singleton.</param>
        </member>
        <member name="M:AmbientSingleton.Create``1(``0,System.Guid)">
            <summary>
            Creates an ambient singleton with the specified default value and identifier.
            </summary>
            <typeparam name="T">Type of value held by the singleton. No need to specify it explicitly.</typeparam>
            <param name="defaultValue">The default value for the singleton.</param>
            <param name="identifier">An identifier for the created singleton. Allows to reuse the ambient "variable" if needed.</param>
        </member>
        <member name="M:AmbientSingleton.Create``1(``0,System.String)">
            <summary>
            Creates an ambient singleton with the specified default value and identifier.
            </summary>
            <typeparam name="T">Type of value held by the singleton. No need to specify it explicitly.</typeparam>
            <param name="defaultValue">The default value for the singleton.</param>
            <param name="identifier">An identifier for the created singleton. Allows to reuse the ambient "variable" if needed.</param>
        </member>
        <member name="M:AmbientSingleton.Create``1(System.Func{``0},System.Guid)">
            <summary>
            Creates an ambient singleton with the specified default value factory.
            </summary>
            <typeparam name="T">Type of value held by the singleton. No need to specify it explicitly.</typeparam>
            <param name="defaultValueFactory">The default value factory for the singleton.</param>
            <param name="identifier">An identifier for the created singleton. Allows to reuse the ambient "variable" if needed.</param>
        </member>
        <member name="M:AmbientSingleton.Create``1(System.Func{``0},System.String)">
            <summary>
            Creates an ambient singleton with the specified default value factory.
            </summary>
            <typeparam name="T">Type of value held by the singleton. No need to specify it explicitly.</typeparam>
            <param name="defaultValueFactory">The default value factory for the singleton.</param>
            <param name="identifier">An identifier for the created singleton. Allows to reuse the ambient "variable" if needed.</param>
        </member>
        <member name="T:AmbientSingleton`1">
            <summary>
            Provides an easy way to implement the singleton (anti?) pattern so that it is ambient-safe,
            propagates with a call context and can be overriden per ambient (i.e. in tests).
            </summary>
            <typeparam name="T">The type of value exposed as an ambient singleton.</typeparam>
            <remarks>
            This class is used to implement singletons that can be replaced in tests and are thread-safe 
            for that scenario. A default value can be provided as a fallback if no ambient-specific value 
            has been set prior to usage (i.e. a default singleton implementation).
            <example>
            The following example shows how to use the ambient singleton to define a singleton 
            clock:
            <code>
            public class SystemClock : IClock
            {
            	private static AmbientSingleton&lt;IClock&gt; singleton;
            		
            	static SystemClock()
            	{
            		singleton = new AmbientSingleton&lt;IClock&gt;(new SystemClock());
            	}
            
            	private SystemClock()
            	{
            		// Can only be instantiated once and only by us.
            	}
            
            	public static IClock Instance 
            	{ 
            		get { return singleton.Value; } 
            		// Made internal so that only our tests can replace this value
            		internal set { singleton.Value = value; }
            	}
            	
            	public DateTimeOffset Now { get { return DateTimeOffset.Now; } }
            }
            </code>
            A consumer domain class might use like as follows:
            <code>
            var now = SystemClock.Instance.Now;
            </code>
            A test could replace the value of Now by simply replacing the singleton:
            <code>
            SystemClock.Instance = mockClock;
            
            // Would now use the mocked clock automatically from the replaced 
            // ambient singleton
            obj.PerformOperation();
            </code>
            </example>
            </remarks>
            <nuget id="netfx-System.AmbientSingleton"/>
        </member>
        <member name="M:AmbientSingleton`1.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:AmbientSingleton`1"/> class 
            without a local default and a specific identifier.
            </summary>
            <param name="identifier">An identifier for the created singleton. Allows to reuse the ambient "variable" if needed.</param>
        </member>
        <member name="M:AmbientSingleton`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AmbientSingleton`1"/> class 
            without a local default, meaning that if no value is assigned 
            to the <see cref="P:AmbientSingleton`1.Value"/> property, it will return the default 
            value for the type.
            </summary>
        </member>
        <member name="M:AmbientSingleton`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:AmbientSingleton`1"/> class 
            with a global default value. This value will be returned by the <see cref="P:AmbientSingleton`1.Value"/> 
            property if no other value has been set in the current call context.
            </summary>
            <param name="defaultValue">The default value for the singleton.</param>
        </member>
        <member name="M:AmbientSingleton`1.#ctor(`0,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:AmbientSingleton`1"/> class 
            with a global default value. This value will be returned by the <see cref="P:AmbientSingleton`1.Value"/> 
            property if no other value has been set in the current call context.
            </summary>
            <param name="defaultValue">The default value for the singleton.</param>
            <param name="identifier">An identifier for the created singleton. Allows to reuse the ambient "variable" if needed.</param>
        </member>
        <member name="M:AmbientSingleton`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AmbientSingleton`1"/> class 
            with a global default value. This value will be returned by the <see cref="P:AmbientSingleton`1.Value"/> 
            property if no other value has been set in the current call context.
            </summary>
            <param name="defaultValue">The default value for the singleton.</param>
            <param name="identifier">An identifier for the created singleton. Allows to reuse the ambient "variable" if needed.</param>
        </member>
        <member name="M:AmbientSingleton`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:AmbientSingleton`1"/> class 
            with a global default value factory. This factory will be called once the first 
            time the global default value is accessed, such as if no other value has been 
            set in the current call context for the <see cref="P:AmbientSingleton`1.Value"/> property.
            </summary>
            <param name="defaultValueFactory">The default value factory for the singleton.</param>
        </member>
        <member name="M:AmbientSingleton`1.#ctor(System.Func{`0},System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:AmbientSingleton`1"/> class 
            with a global default value factory. This factory will be called once the first 
            time the global default value is accessed, such as if no other value has been 
            set in the current call context for the <see cref="P:AmbientSingleton`1.Value"/> property.
            </summary>
            <param name="defaultValueFactory">The default value factory for the singleton.</param>
            <param name="identifier">An identifier for the created singleton. Allows to reuse the ambient "variable" if needed.</param>
        </member>
        <member name="M:AmbientSingleton`1.#ctor(System.Func{`0},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AmbientSingleton`1"/> class 
            with a global default value factory. This factory will be called once the first 
            time the global default value is accessed, such as if no other value has been 
            set in the current call context for the <see cref="P:AmbientSingleton`1.Value"/> property.
            </summary>
            <param name="defaultValueFactory">The default value factory for the singleton.</param>
            <param name="identifier">An identifier for the created singleton. Allows to reuse the ambient "variable" if needed.</param>
        </member>
        <member name="P:AmbientSingleton`1.Value">
            <summary>
            Gets or sets the value of the ambient singleton.
            </summary>
            <remarks>
            Setting the value will only change the specified 
            default value in the constructor for the current 
            call context.
            </remarks>
        </member>
        <member name="T:TraverseKind">
            <nuget id="netfx-System.Collections.Generic.IEnumerable.Traverse" />
        </member>
        <member name="T:Traverser">
            <summary>
            Traverses a tree (without checking for circular references) using 
            a stack or queue based approach (no recursion), allowing infinitely 
            deep trees.
            </summary>
            <nuget id="netfx-System.Collections.Generic.IEnumerable.Traverse" />
        </member>
        <member name="M:Traverser.Traverse``1(System.Collections.Generic.IEnumerable{``0},TraverseKind,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Traverses a tree using the given traversal <paramref name="kind"/>.
            </summary>
            <nuget id="netfx-System.Collections.Generic.IEnumerable.Traverse"/>
            <typeparam name="T">Type of the items to traverse, which can be inferred by the compiler so it's not necessary to specify it.</typeparam>
            <param name="source" this="true">The root items for the traversal, which are always included in the result of the traversal.</param>
            <param name="kind">Traversal style to use. See <see cref="T:TraverseKind"/>.</param>
            <param name="traverser">The traversing function that is applied to the current item of the type <typeparamref name="T"/>.</param>
            <returns>A flattened enumeration of the traversal, lazily evaluated.</returns>
        </member>
        <member name="T:Guard">
            <summary>
            Common guard class for argument validation.
            </summary>
            <nuget id="netfx-Guard" />
        </member>
        <member name="M:Guard.NotNull``1(System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>
            Ensures the given <paramref name="value"/> is not null.
            Throws <see cref="T:System.ArgumentNullException"/> otherwise.
            </summary>
            <exception cref="T:System.ArgumentException">The <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Guard.NotNullOrEmpty(System.Linq.Expressions.Expression{System.Func{System.String}},System.String)">
            <summary>
            Ensures the given string <paramref name="value"/> is not null or empty.
            Throws <see cref="T:System.ArgumentNullException"/> in the first case, or 
            <see cref="T:System.ArgumentException"/> in the latter.
            </summary>
            <exception cref="T:System.ArgumentException">The <paramref name="value"/> is null or an empty string.</exception>
        </member>
        <member name="M:Guard.IsValid``1(System.Linq.Expressions.Expression{System.Func{``0}},``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            Ensures the given string <paramref name="value"/> is valid according 
            to the <paramref name="validate"/> function. Throws <see cref="T:System.ArgumentNullException"/> 
            otherwise.
            </summary>
            <exception cref="T:System.ArgumentException">The <paramref name="value"/> is not valid according 
            to the <paramref name="validate"/> function.</exception>
        </member>
        <member name="M:Guard.IsValid``1(System.Linq.Expressions.Expression{System.Func{``0}},``0,System.Func{``0,System.Boolean},System.String,System.Object[])">
            <summary>
            Ensures the given string <paramref name="value"/> is valid according 
            to the <paramref name="validate"/> function. Throws <see cref="T:System.ArgumentNullException"/> 
            otherwise.
            </summary>
            <exception cref="T:System.ArgumentException">The <paramref name="value"/> is not valid according 
            to the <paramref name="validate"/> function.</exception>
        </member>
        <member name="T:StringFormatWithExtension">
            <summary>
            Requires a reference to System.Web.
            </summary>
        </member>
        <member name="M:StringFormatWithExtension.FormatWith(System.String,System.Object)">
            <summary>
            Formats the string with the given source object. 
            Expression like {Id} are replaced with the corresponding 
            property value in the <paramref name="source"/>. Supports 
            all <see cref="M:System.Web.UI.DataBinder.Eval(System.Object,System.String)"/> expressions formats 
            for property access.
            </summary>
            <nuget id="netfx-System.StringFormatWith"/>
            <param name="format" this="true">The string to format</param>
            <param name="source">The source object to apply to format</param>
        </member>
        <member name="T:DispatcherInvokeExtensions">
            <summary>
            Helpers for easily invoking via the <see cref="T:System.Windows.Threading.Dispatcher"/> using 
            an <see cref="T:System.Action"/> or a <see cref="T:System.Func`1"/> delegate or lambda.
            </summary>
            <netfx id="netfx-System.Windows.Threading.DispatcherInvokeExtensions"/>
        </member>
        <member name="M:DispatcherInvokeExtensions.BeginInvoke(System.Windows.Threading.Dispatcher,System.Action)">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments
            on the thread that the System.Windows.Threading.Dispatcher was created on.
            </summary>
            <param name="dispatcher">The dispatcher to invoke the action on.</param>
            <param name="action">The action to execute via the dispatcher.</param>
        </member>
        <member name="M:DispatcherInvokeExtensions.BeginInvoke(System.Windows.Threading.Dispatcher,System.Action,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments
            on the thread that the System.Windows.Threading.Dispatcher was created on.
            </summary>
            <param name="dispatcher">The dispatcher to invoke the action on.</param>
            <param name="action">The action to execute via the dispatcher.</param>
            <param name="priority">The priority to execute the action with.</param>
        </member>
        <member name="M:DispatcherInvokeExtensions.Invoke(System.Windows.Threading.Dispatcher,System.Action)">
            <summary>
            Executes the specified delegate with the specified arguments synchronously
            on the thread the System.Windows.Threading.Dispatcher is associated with.
            </summary>
            <param name="dispatcher">The dispatcher to invoke the action on.</param>
            <param name="action">The action to execute via the dispatcher.</param>
        </member>
        <member name="M:DispatcherInvokeExtensions.Invoke(System.Windows.Threading.Dispatcher,System.Action,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Executes the specified delegate with the specified arguments synchronously
            on the thread the System.Windows.Threading.Dispatcher is associated with.
            </summary>
            <param name="dispatcher">The dispatcher to invoke the action on.</param>
            <param name="action">The action to execute via the dispatcher.</param>
            <param name="priority">The priority to execute the action with.</param>
        </member>
        <member name="M:DispatcherInvokeExtensions.Invoke``1(System.Windows.Threading.Dispatcher,System.Func{``0})">
            <summary>
            Executes the specified delegate with the specified arguments synchronously
            on the thread the System.Windows.Threading.Dispatcher is associated with.
            </summary>
            <param name="dispatcher">The dispatcher to invoke the action on.</param>
            <param name="action">The action to execute via the dispatcher.</param>
            <returns>The return value from the delegate being invoked</returns>
        </member>
        <member name="M:DispatcherInvokeExtensions.Invoke``1(System.Windows.Threading.Dispatcher,System.Func{``0},System.Windows.Threading.DispatcherPriority)">
            <summary>
            Executes the specified delegate with the specified arguments synchronously
            on the thread the System.Windows.Threading.Dispatcher is associated with.
            </summary>
            <param name="dispatcher">The dispatcher to invoke the action on.</param>
            <param name="action">The action to execute via the dispatcher.</param>
            <param name="priority">The priority to execute the action with.</param>
            <returns>The return value from the delegate being invoked</returns>
        </member>
        <member name="T:Clide.Patterns.Adapter.AdapterAttribute">
            <summary>
            Attributes an adapter component that should be automatically 
            registered with the adapter service.
            </summary>
        </member>
        <member name="T:Clide.Patterns.Adapter.Adapters">
            <summary>
            Provides the entry point for setting the implementation of the 
            <see cref="T:Clide.Patterns.Adapter.IAdapterService"/> as well as the <see cref="M:Clide.Patterns.Adapter.Adapters.Adapt``1(``0)"/> 
            extension method for consumers.
            </summary>
        </member>
        <member name="M:Clide.Patterns.Adapter.Adapters.Adapt``1(``0)">
            <summary>
            Returns an adaptable object for the given <paramref name="source"/>.
            </summary>
            <returns>The adaptable object for the given source type.</returns>
        </member>
        <member name="T:Clide.Commands.CommandAttribute">
            <summary>
            Attribute that must be placed on command implementations in order to 
            use the <see cref="M:Clide.Commands.ICommandManager.AddCommands"/> method.
            </summary>
        </member>
        <member name="M:Clide.Commands.CommandAttribute.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.Commands.CommandAttribute"/> class 
            from a dictionary of values
            </summary>
        </member>
        <member name="M:Clide.Commands.CommandAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.Commands.CommandAttribute"/> class.
            </summary>
        </member>
        <member name="P:Clide.Commands.CommandAttribute.GroupId">
            <summary>
            Gets the group GUID.
            </summary>
        </member>
        <member name="P:Clide.Commands.CommandAttribute.CommandId">
            <summary>
            Gets the command id.
            </summary>
        </member>
        <member name="T:Clide.Commands.CommandFilterAttribute">
            <summary>
            Attribute that must be placed on command implementations in order to 
            use the <see cref="M:Clide.Commands.ICommandManager.AddCommands"/> method.
            </summary>
        </member>
        <member name="M:Clide.Commands.CommandFilterAttribute.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.Commands.CommandFilterAttribute"/> class 
            from a dictionary of values
            </summary>
        </member>
        <member name="M:Clide.Commands.CommandFilterAttribute.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.Commands.CommandFilterAttribute"/> class.
            </summary>
            <param name="packageGuid">Identifer for the package that owns/exposes the given command.</param>
            <param name="groupGuid">Gets the command group GUID (also known as CommandSet ID).</param>
            <param name="commandId">The command id.</param>
        </member>
        <member name="P:Clide.Commands.CommandFilterAttribute.PackageId">
            <summary>
            Identifer for the package that owns/exposes the given command.
            </summary>
        </member>
        <member name="P:Clide.Commands.CommandFilterAttribute.GroupId">
            <summary>
            Gets the command group GUID (also known as CommandSet ID).
            </summary>
        </member>
        <member name="P:Clide.Commands.CommandFilterAttribute.CommandId">
            <summary>
            Gets the command id.
            </summary>
        </member>
        <member name="T:Clide.Commands.CommandManager">
            <summary>
            Implements the command registration mechanism.
            </summary>
        </member>
        <member name="T:Clide.Commands.ICommandManager">
            <summary>
            Manages commands in the environment.
            </summary>
        </member>
        <member name="M:Clide.Commands.ICommandManager.AddCommand(Clide.Commands.ICommandExtension,Clide.Commands.CommandAttribute)">
            <summary>
            Adds the specified command implementation to the manager, 
            with the specified explicit metadata.
            </summary>
            <param name="command">The command instance, which does not need to 
            be annotated with the <see cref="T:Clide.Commands.CommandAttribute"/> attribute since 
            it's provided explicitly.</param>
            <param name="metadata">Explicit metadata to use for the command, 
            instead of reflecting the <see cref="T:Clide.Commands.CommandAttribute"/>.</param>
            <remarks>
            No dependency injection is performed on these pre-created instances.
            </remarks>
        </member>
        <member name="M:Clide.Commands.ICommandManager.AddCommands">
            <summary>
            Adds all the commands that have been annotated with the <see cref="T:Clide.Commands.CommandAttribute"/>.
            </summary>
        </member>
        <member name="M:Clide.Commands.ICommandManager.AddFilter(Clide.Commands.ICommandFilter,Clide.Commands.CommandFilterAttribute)">
            <summary>
            Adds the specified command filter implementation to the manager, 
            with the specified explicit metadata.
            </summary>
            <param name="filter">The command filter instance, which does not need to 
            be annotated with the <see cref="T:Clide.Commands.CommandFilterAttribute"/> attribute since 
            it's provided explicitly.</param>
            <param name="metadata">Explicit metadata to use for the command, 
            instead of reflecting the <see cref="T:Clide.Commands.CommandFilterAttribute"/>.</param>
            <remarks>
            No dependency injection is performed on these pre-created instances.
            </remarks>
        </member>
        <member name="M:Clide.Commands.ICommandManager.AddFilters">
            <summary>
            Adds all the commands filters that have been annotated with the <see cref="T:Clide.Commands.CommandFilterAttribute"/>.
            </summary>
        </member>
        <member name="M:Clide.Commands.ICommandManager.AddInterceptor(Clide.Commands.ICommandInterceptor,Clide.Commands.CommandInterceptorAttribute)">
            <summary>
            Adds the specified command interceptor implementation to the manager, 
            with the specified explicit metadata.
            </summary>
            <param name="interceptor">The command interceptor instance, which does not need to 
            be annotated with the <see cref="T:Clide.Commands.CommandInterceptorAttribute"/> attribute since 
            it's provided explicitly.</param>
            <param name="metadata">Explicit metadata to use for the interceptor, 
            instead of reflecting the <see cref="T:Clide.Commands.CommandInterceptorAttribute"/>.</param>
            <remarks>
            No dependency injection is performed on these pre-created instances.
            </remarks>
        </member>
        <member name="M:Clide.Commands.ICommandManager.AddInterceptors">
            <summary>
            Adds all the commands interceptors that have been annotated with the <see cref="T:Clide.Commands.CommandInterceptorAttribute"/>.
            </summary>
        </member>
        <member name="M:Clide.Commands.CommandManager.#ctor(System.IServiceProvider,System.Collections.Generic.IEnumerable{System.Lazy{Clide.Commands.ICommandExtension,Clide.Commands.CommandAttribute}},System.Collections.Generic.IEnumerable{System.Lazy{Clide.Commands.ICommandFilter,Clide.Commands.CommandFilterAttribute}},System.Collections.Generic.IEnumerable{System.Lazy{Clide.Commands.ICommandInterceptor,Clide.Commands.CommandInterceptorAttribute}})">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.Commands.CommandManager"/> class.
            </summary>
        </member>
        <member name="M:Clide.Commands.CommandManager.AddCommand(Clide.Commands.ICommandExtension,Clide.Commands.CommandAttribute)">
            <summary>
            Adds the specified command implementation to the manager,
            with the specified explicit metadata.
            </summary>
            <param name="command">The command instance, which does not need to
            be annotated with the <see cref="T:Clide.Commands.CommandAttribute"/> attribute since
            it's provided explicitly.</param>
            <param name="metadata">Explicit metadata to use for the command,
            instead of reflecting the <see cref="T:Clide.Commands.CommandAttribute"/>.</param>
        </member>
        <member name="M:Clide.Commands.CommandManager.AddCommands">
            <summary>
            Adds all the commands that have been annotated with the <see cref="T:Clide.Commands.CommandAttribute"/>.
            </summary>
        </member>
        <member name="M:Clide.Commands.CommandManager.AddFilter(Clide.Commands.ICommandFilter,Clide.Commands.CommandFilterAttribute)">
            <summary>
            Adds the specified command filter implementation to the manager,
            with the specified explicit metadata.
            </summary>
            <param name="filter">The command filter instance, which does not need to
            be annotated with the <see cref="T:Clide.Commands.CommandFilterAttribute"/> attribute since
            it's provided explicitly.</param>
            <param name="metadata">Explicit metadata to use for the command filter,
            instead of reflecting the <see cref="T:Clide.Commands.CommandFilterAttribute"/>.</param>
        </member>
        <member name="M:Clide.Commands.CommandManager.AddFilters">
            <summary>
            Adds all the command filters that have been annotated with the <see cref="T:Clide.Commands.CommandFilterAttribute"/>.
            </summary>
        </member>
        <member name="M:Clide.Commands.CommandManager.AddInterceptor(Clide.Commands.ICommandInterceptor,Clide.Commands.CommandInterceptorAttribute)">
            <summary>
            Adds the specified command interceptor implementation to the manager,
            with the specified explicit metadata.
            </summary>
            <param name="interceptor">The command interceptor instance, which does not need to
            be annotated with the <see cref="T:Clide.Commands.CommandInterceptorAttribute"/> attribute since
            it's provided explicitly.</param>
            <param name="metadata">Explicit metadata to use for the command interceptor,
            instead of reflecting the <see cref="T:Clide.Commands.CommandInterceptorAttribute"/>.</param>
        </member>
        <member name="M:Clide.Commands.CommandManager.AddInterceptors">
            <summary>
            Adds all the command interceptors that have been annotated with the <see cref="T:Clide.Commands.CommandInterceptorAttribute"/>.
            </summary>
        </member>
        <member name="T:Clide.Commands.ICommandExtension">
            <summary>
            Represents a command that extends the environment.
            </summary>
        </member>
        <member name="M:Clide.Commands.ICommandExtension.Execute(Clide.Commands.IMenuCommand)">
            <summary>
            Executes the command, taking into account its <see cref="T:Clide.Commands.IMenuCommand"/> state.
            </summary>
        </member>
        <member name="M:Clide.Commands.ICommandExtension.QueryStatus(Clide.Commands.IMenuCommand)">
            <summary>
            Determines the dynamic state of the command.
            </summary>
        </member>
        <member name="P:Clide.Commands.ICommandExtension.Text">
            <summary>
            Gets the initial text for the command.
            </summary>
        </member>
        <member name="T:Clide.Commands.ICommandFilter">
            <summary>
            Represents a component that reacts to the command 
            query status allowing to filter command availability.
            </summary>
        </member>
        <member name="M:Clide.Commands.ICommandFilter.QueryStatus(Clide.Commands.IMenuCommand)">
            <summary>
            Determines the dynamic state of the command.
            </summary>
        </member>
        <member name="T:Clide.Commands.IMenuCommand">
            <summary>
            Provides current status information for an <see cref="T:Clide.Commands.ICommandExtension"/> 
            and <see cref="T:Clide.Commands.ICommandFilter"/>.
            </summary>
        </member>
        <member name="P:Clide.Commands.IMenuCommand.Enabled">
            <summary>
            Gets or sets a value indicating whether a <see cref="T:Clide.Commands.ICommandExtension"/> is enabled.
            </summary>
        </member>
        <member name="P:Clide.Commands.IMenuCommand.Text">
            <summary>
            Gets or sets the text to display for the command.
            </summary>
        </member>
        <member name="P:Clide.Commands.IMenuCommand.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Clide.Commands.ICommandExtension"/> is visible.
            </summary>
        </member>
        <member name="P:Clide.Commands.IMenuCommand.Checked">
            <summary>
            Gets or sets a value indicating whether this menu item is checked.
            </summary>
        </member>
        <member name="T:Clide.Commands.OleMenuCommandAdapter">
            <summary>
            Adapts the <see cref="T:Microsoft.VisualStudio.Shell.OleMenuCommand"/> class to the 
            <see cref="T:Clide.Commands.IMenuCommand"/> interface we expose.
            </summary>
        </member>
        <member name="T:Clide.Commands.VsCommand">
            <summary>
            Base class for all VS Commands    
            </summary>
        </member>
        <member name="M:Clide.Commands.VsCommand.#ctor(System.IServiceProvider,System.EventHandler,System.ComponentModel.Design.CommandID)">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.Commands.VsCommand"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="onExecute">The on execute delegate.</param>
            <param name="id">The command id.</param>
        </member>
        <member name="M:Clide.Commands.VsCommand.OnBeforeQueryStatus(System.Object,System.EventArgs)">
            <summary>
            Called to query the command status.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Clide.Commands.VsCommand.CanExecute(Microsoft.VisualStudio.Shell.OleMenuCommand)">
            <summary>
            Determines whether this instance can execute the specified command.
            </summary>
            <param name="command">The command.</param>
            <returns>
              <c>true</c> if this instance can execute the specified command; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Clide.Commands.VsCommand.ServiceProvider">
            <summary>
            Gets the service provider.
            </summary>
        </member>
        <member name="T:Clide.Commands.VsCommandExtensionAdapter">
            <summary>
            Base Visual Studio adapter command that invokes an <see cref="T:Clide.Commands.ICommandExtension"/> implementation, 
            automatically shielding it for errors to avoid VS hangs, and starting an activity before 
            executing it.
            </summary>
        </member>
        <member name="M:Clide.Commands.VsCommandExtensionAdapter.#ctor(System.ComponentModel.Design.CommandID,Clide.Commands.ICommandExtension)">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.Commands.VsCommandExtensionAdapter"/> class with a 
            specific command identifier and implementation.
            </summary>
        </member>
        <member name="P:Clide.Commands.VsCommandExtensionAdapter.Implementation">
            <summary>
            Gets the command implementation.
            </summary>
        </member>
        <member name="T:Clide.DevEnv">
            <summary>
            Entry point to the Clide developer environment APIs.
            </summary>
        </member>
        <member name="M:Clide.DevEnv.Get(System.IServiceProvider)">
            <summary>
            Gets the developer environment for the given service provider. 
            Make sure you pass your package to get your scoped dev env.
            </summary>
            <remarks>
            By default, the <see cref="T:Clide.IDevEnv"/> instance is cached for the 
            given service provider, and only created once, using the given 
            IDE services as necessary. This default behavior can 
            be overriden by setting the <see cref="P:Clide.DevEnv.DevEnvFactory"/>.
            </remarks>
            <param name="serviceProvider">Typically, this is your package service provider, 
            so that all provided ClideComponents are properly resolved and available through 
            it. If you pass in the global VS service provider, you will get an instance 
            that only contains the core Clide services but does not export any of the 
            package Clide components.</param>
        </member>
        <member name="M:Clide.DevEnv.Get(System.Guid)">
            <summary>
            Gets the developer environment for the given package identifier. 
            Make sure you pass your package GUID to get your scoped dev env.
            </summary>
            <remarks>
            By default, the <see cref="T:Clide.IDevEnv"/> instance is cached for the 
            given service provider, and only created once, using the given 
            IDE services as necessary. This default behavior can 
            be overriden by setting the <see cref="P:Clide.DevEnv.DevEnvFactory"/>.
            </remarks>
            <param name="packageId">This is your package identifier, 
            so that all provided ClideComponents are properly resolved and available through 
            it. If you pass in the global VS service provider, you will get an instance 
            that only contains the core Clide services but does not export any of the 
            package Clide components.</param>
        </member>
        <member name="P:Clide.DevEnv.DevEnvFactory">
            <summary>
            Gets or sets the factory that will create instances of 
            <see cref="T:Clide.IDevEnv"/> when the <see cref="M:Clide.DevEnv.Get(System.Guid)"/>
            or <see cref="M:Clide.DevEnv.Get(System.IServiceProvider)"/> methods 
            are invoked by consumers. This is an ambient singleton, so 
            it is safe to replace it in multi-threaded test runs.
            </summary>
        </member>
        <member name="T:System.ServiceProviderExtensions">
            <summary>
            Provides useful extensions to the IDE service provider.
            </summary>
            <summary>
            Defines extension methods related to <see cref="T:System.IServiceProvider"/>.
            </summary>
        </member>
        <member name="M:System.ServiceProviderExtensions.GetPackageGuidOrThrow(System.IServiceProvider)">
            <summary>
            Gets the package GUID or throws an <see cref="T:System.ArgumentException"/> if the 
            <see cref="T:System.Runtime.InteropServices.GuidAttribute"/> is not found on the given instance type.
            </summary>
        </member>
        <member name="M:System.ServiceProviderExtensions.GetLoadedPackage``1(System.IServiceProvider)">
            <summary>
            Retrieves an existing loaded package or loads it 
            automatically if needed.
            </summary>
            <typeparam name="TPackage">The type of the package to load.</typeparam>
            <returns>The fully loaded and initialized package.</returns>
        </member>
        <member name="M:System.ServiceProviderExtensions.GetLoadedPackage(System.IServiceProvider,System.Guid)">
            <summary>
            Retrieves an existing loaded package or loads it 
            automatically if needed.
            </summary>
            <returns>The fully loaded and initialized package.</returns>
        </member>
        <member name="M:System.ServiceProviderExtensions.TryGetService``1(System.IServiceProvider)">
            <summary>
            Gets type-based services from the  service provider.
            </summary>
            <nuget id="netfx-System.ServiceProvider" />
            <typeparam name="T">The type of the service to get.</typeparam>
            <param name="provider" this="true">The service provider.</param>
            <returns>The requested service, or a <see langword="null"/> reference if the service could not be located.</returns>
        </member>
        <member name="M:System.ServiceProviderExtensions.GetService``1(System.IServiceProvider)">
            <summary>
            Gets type-based services from the  service provider.
            </summary>
            <nuget id="netfx-System.ServiceProvider"/>
            <typeparam name="T">The type of the service to get.</typeparam>
            <param name="provider" this="true">The service provider.</param>
            <returns>The requested service, or throws an <see cref="T:System.InvalidOperationException"/> 
            if the service was not found.</returns>
        </member>
        <member name="M:System.ServiceProviderExtensions.TryGetService``2(System.IServiceProvider)">
            <summary>
            Gets type-based services from the service provider.
            </summary>
            <nuget id="netfx-System.ServiceProvider" />
            <typeparam name="TRegistration">The type of the registration of the service.</typeparam>
            <typeparam name="TService">The type of the service to get.</typeparam>
            <param name="provider" this="true">The service provider.</param>
            <returns>The requested service, or a <see langword="null"/> reference if the service could not be located.</returns>
        </member>
        <member name="M:System.ServiceProviderExtensions.GetService``2(System.IServiceProvider)">
            <summary>
            Gets type-based services from the service provider.
            </summary>
            <nuget id="netfx-System.ServiceProvider"/>
            <typeparam name="TRegistration">The type of the registration of the service.</typeparam>
            <typeparam name="TService">The type of the service to get.</typeparam>
            <param name="provider" this="true">The service provider.</param>
            <returns>The requested service, or throws an <see cref="T:System.InvalidOperationException"/> 
            if the service was not found.</returns>
        </member>
        <member name="T:Clide.Host">
            <summary>
            Core host implementation, to be cached while the 
            hosting package remains loaded, to prevent 
            garbage collection of the exposed components and 
            services.
            </summary>
        </member>
        <member name="M:Clide.Host.Initialize(System.IServiceProvider)">
            <summary>
            Registers the package components such as commands, filter, options, etc.
            with the development environment. This call should always be made from 
            the package Initialize method, which is guaranteed to run on the UI 
            thread.
            </summary>
            <param name="hostingPackage">The package owning this deploy 
            of Clide.</param>
        </member>
        <member name="M:Clide.Host.Initialize(System.IServiceProvider,System.String,System.String)">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="T:Clide.Events.ProjectEventArgs">
            <summary>
            Events argument data for project-related events.
            </summary>
        </member>
        <member name="M:Clide.Events.ProjectEventArgs.#ctor(System.Lazy{Clide.Solution.IProjectNode})">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.Events.ProjectEventArgs"/> class.
            </summary>
            <param name="project">The project.</param>
        </member>
        <member name="P:Clide.Events.ProjectEventArgs.Project">
            <summary>
            Gets the project that the event applies to or that raised the event.
            </summary>
        </member>
        <member name="T:Clide.Events.IShellEvents">
            <summary>
            Shell-related events and state.
            </summary>
        </member>
        <member name="T:Clide.Events.IGlobalEvents">
            <summary>
            Marker interface and composition contract for events that are global 
            in the developer environment.
            </summary>
        </member>
        <member name="P:Clide.Events.IShellEvents.IsInitialized">
            <summary>
            Gets a value indicating whether the shell has been initialized.
            </summary>
        </member>
        <member name="E:Clide.Events.IShellEvents.Initialized">
            <summary>
            Occurs when the shell has finished initializing.
            </summary>
        </member>
        <member name="E:Clide.Events.ShellEvents.Initialized">
            <summary>
            Occurs when the shell has finished initializing.
            </summary>
        </member>
        <member name="T:Clide.Events.ISolutionEvents">
            <summary>
            Exposes solution-level events.
            </summary>
        </member>
        <member name="E:Clide.Events.ISolutionEvents.ProjectOpened">
            <summary>
            Occurs when a project is opened.
            </summary>
        </member>
        <member name="E:Clide.Events.ISolutionEvents.ProjectClosing">
            <summary>
            Occurs when a project is being closed.
            </summary>
        </member>
        <member name="E:Clide.Events.ISolutionEvents.SolutionOpened">
            <summary>
            Occurs when a solution is opened.
            </summary>
        </member>
        <member name="E:Clide.Events.ISolutionEvents.SolutionClosing">
            <summary>
            Occurs when a solution is being closed.
            </summary>
        </member>
        <member name="E:Clide.Events.ISolutionEvents.SolutionClosed">
            <summary>
            Occurs when a solution was closed.
            </summary>
        </member>
        <member name="T:Clide.IMessageBoxServiceExtensions">
            <summary>
            Provides usability overloads for the <see cref="T:Clide.IMessageBoxService"/>.
            </summary>
        </member>
        <member name="M:Clide.IMessageBoxServiceExtensions.ShowInformation(Clide.IMessageBoxService,System.String)">
            <summary>
            Shows an information dialog.
            </summary>
        </member>
        <member name="M:Clide.IMessageBoxServiceExtensions.ShowWarning(Clide.IMessageBoxService,System.String)">
            <summary>
            Shows a warning dialog.
            </summary>
        </member>
        <member name="T:System.Diagnostics.TracingExtensions">
            <summary>
            Provides tracing extensions on top of <see cref="T:Clide.Diagnostics.ITracer"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.TracingExtensions.ShieldUI(Clide.Diagnostics.ITracer,System.Action,System.String,System.String[])">
            <summary>
            Executes the given <paramref name="action"/> shielding any non-critical exceptions 
            and logging them to the <paramref name="tracer"/> with the given <paramref name="errorMessageFormat"/> message.
            </summary>
        </member>
        <member name="M:System.Diagnostics.TracingExtensions.ShieldUI(Clide.Diagnostics.ITracer,System.Action,System.String)">
            <summary>
            Executes the given <paramref name="action"/> shielding any non-critical exceptions 
            and logging them to the <paramref name="tracer"/> with the given <paramref name="errorMessage"/> message.
            </summary>
        </member>
        <member name="P:System.Diagnostics.TracingExtensions.ShowExceptionAction">
            <summary>
            Gets or sets the default behavior for showing exceptions.
            </summary>
        </member>
        <member name="T:Clide.IOptionsManager">
            <summary>
            Manages extensions to the <c>Tools | Options</c> dialog in the environment
            </summary>
        </member>
        <member name="M:Clide.IOptionsManager.AddPage(Clide.IOptionsPage)">
            <summary>
            Adds the given page to the manager..
            </summary>
        </member>
        <member name="M:Clide.IOptionsManager.AddPages">
            <summary>
            Adds all the registered page components.
            </summary>
        </member>
        <member name="T:Clide.IOptionsPage">
            <summary>
            Basic contract for pages that plug into the Tools | Options dialog.
            </summary>
        </member>
        <member name="T:Clide.Patterns.Adapter.AdapterService">
            <summary>
            Default implementation of the <see cref="T:Clide.Patterns.Adapter.IAdapterService"/>.
            </summary>
        </member>
        <member name="T:Clide.Patterns.Adapter.IAdapterService">
            <summary>
            Service that provides pluggable adaptation of types.
            </summary>
        </member>
        <member name="M:Clide.Patterns.Adapter.IAdapterService.Adapt``1(``0)">
            <summary>
            Returns an adaptable object for the given <paramref name="source"/>.
            </summary>
            <returns>The adaptable object for the given source type.</returns>
        </member>
        <member name="M:Clide.Patterns.Adapter.AdapterService.#ctor(System.Collections.Generic.IEnumerable{Clide.Patterns.Adapter.IAdapter})">
            <summary>
            Initializes the adapter service with the given set of adapters.
            </summary>
        </member>
        <member name="M:Clide.Patterns.Adapter.AdapterService.Adapt``1(``0)">
            <summary>
            Returns an adaptable object for the given <paramref name="source" />.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns>
            The adaptable object for the given source type.
            </returns>
        </member>
        <member name="M:Clide.Patterns.Adapter.AdapterService.GetSupportedConversions(System.Type)">
            <summary>
            This method is used only for diagnostics purposes.
            </summary>
        </member>
        <member name="T:Clide.Patterns.Adapter.IAdaptable`1">
            <summary>
            Exposes the <see cref="M:Clide.Patterns.Adapter.IAdaptable`1.As``1"/> method that allows any 
            object to be adapted to any other type (provided there 
            is a compatible adapter registered in the system).
            </summary>
        </member>
        <member name="T:Clide.Patterns.Adapter.IFluentInterface">
            <summary>
            Interface that is used to build fluent interfaces and hides methods declared by <see cref="T:System.Object"/> from IntelliSense.
            </summary>
            <remarks>
            Code that consumes implementations of this interface should expect one of two things:
            <list type="number">
              <item>When referencing the interface from within the same solution (project reference), you will still see the methods this interface is meant to hide.</item>
              <item>When referencing the interface through the compiled output assembly (external reference), the standard Object methods will be hidden as intended.</item>
            </list>
            See http://bit.ly/ifluentinterface for more information.
            </remarks>
        </member>
        <member name="M:Clide.Patterns.Adapter.IFluentInterface.GetType">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.GetType"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:Clide.Patterns.Adapter.IFluentInterface.GetHashCode">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.GetHashCode"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:Clide.Patterns.Adapter.IFluentInterface.ToString">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.ToString"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:Clide.Patterns.Adapter.IFluentInterface.Equals(System.Object)">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.Equals(System.Object)"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:Clide.Patterns.Adapter.IAdaptable`1.As``1">
            <summary>
            Adapts the instance to the given target type.
            </summary>
            <returns>The adapted instance or <see langword="null"/> if no compatible adapter was found.</returns>
        </member>
        <member name="T:Clide.Patterns.Adapter.AdaptersInitializer">
            <summary>
            Provides the entry point for setting the implementation of the 
            <see cref="T:Clide.Patterns.Adapter.IAdapterService"/>, typically used only by bootstrapping 
            code.
            </summary>
            <remarks>
            Startup code in the application should invoke the <see cref="M:Clide.Patterns.Adapter.AdaptersInitializer.SetService(Clide.Patterns.Adapter.IAdapterService)"/> method
            before any adaptations are performed. Alternatively, a transient service API 
            is provided that allows specific contexts to override the global implementation, 
            typically in multi-threaded test runs, which invoke the <see cref="M:Clide.Patterns.Adapter.AdaptersInitializer.SetTransientService(Clide.Patterns.Adapter.IAdapterService)"/> 
            method instead. 
            <para>
            This transient instance remains the current adapter service for the 
            duration of the call, including spanned threads or tasks.
            </para>
            </remarks>
        </member>
        <member name="M:Clide.Patterns.Adapter.AdaptersInitializer.SetService(Clide.Patterns.Adapter.IAdapterService)">
            <summary>
            Sets the singleton adapter service instance to use to implement the 
            <see cref="M:Clide.Patterns.Adapter.Adapters.Adapt``1(``0)"/> extension method for the entire lifetime of the 
            current application domain.
            </summary>
        </member>
        <member name="M:Clide.Patterns.Adapter.AdaptersInitializer.SetTransientService(Clide.Patterns.Adapter.IAdapterService)">
            <summary>
            Sets up a transient adapter service that remains active during 
            an entire call chain, even across code that spawns new threads 
            or tasks, but does not overwrite the global singleton service 
            specified via <see cref="M:Clide.Patterns.Adapter.AdaptersInitializer.SetService(Clide.Patterns.Adapter.IAdapterService)"/>.
            </summary>
            <returns>A disposable object that removes the transient service when disposed.</returns>
            <remarks>
            Typical usage includes placing the call in a using statement:
            <code>
            using (AdaptersInitializer.SetTransientService(serviceMock))
            {
              // Invoke code that uses the adapter service.
            }
            </code>
            </remarks>
        </member>
        <member name="T:Clide.Patterns.Adapter.Constants">
            <summary>
            Shared constants across implementation and interface.
            </summary>
        </member>
        <member name="P:Clide.Patterns.Adapter.Constants.GlobalStateIdentifier">
            <summary>
            The identifier for the global state that lives in the AppDomain and provides 
            the implementation for the extension method at runtime.
            </summary>
            <remarks>
            The current assembly version is always prepended to this identifier to 
            avoid collisions in the AppDomain if multiple versions of the adapter 
            are running side-by-side.
            </remarks>
        </member>
        <member name="P:Clide.Patterns.Adapter.Constants.TransientStateIdenfier">
            <summary>
            The identifier for the transient state that lives in an AmbientSingleton that 
            can be used in tests to replace the adapter service.
            </summary>
            <remarks>
            The current assembly version is always prepended to this identifier to 
            avoid collisions in the AppDomain if multiple versions of the adapter 
            are running side-by-side.
            </remarks>
        </member>
        <member name="T:Clide.Patterns.Adapter.IAdapter">
            <summary>
            Marker interface for all adapters.
            </summary>
        </member>
        <member name="T:Clide.Patterns.Adapter.IAdapter`2">
            <summary>
            Interface implemented by adapters that know how to expose a 
            type as a different interface.
            </summary>
            <typeparam name="TFrom">The type that this adapter supports adapting from.</typeparam>
            <typeparam name="TTo">The type that this adapter adapts to.</typeparam>
        </member>
        <member name="M:Clide.Patterns.Adapter.IAdapter`2.Adapt(`0)">
            <summary>
            Adapts the specified object from the <typeparamref name="TFrom"/> type to the 
            target <typeparamref name="TTo"/> type.
            </summary>
        </member>
        <member name="T:Clide.Properties.Strings">
            <summary>
            Provides access to string resources.
            </summary>
        </member>
        <member name="T:Clide.Properties.Strings.CommandManager">
            <summary>
            Provides access to string resources.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.CommandManager.CommandAttributeMissing(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            In order to register command instance '{command}', it must have a [Command] attribute.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.CommandManager.CommandFilterAttributeMissing(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            In order to register command filter instance '{filter}', it must have a [CommandFilter] attribute.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.CommandManager.CommandInterceptorAttributeMissing(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            In order to register command interceptor instance '{interceptor}', it must have a [CommandInterceptor] attribute.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.CommandManager.CommandNotFound(System.Object,System.Object,System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Package '{packageId}' does not provide a command with group identifier '{groupId}' and command identifier '{commandId}'.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.CommandManager.CommandNotOle(System.Object,System.Object,System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Command to filter does not provide the required BeforeQueryStatus event (typically inherited from OleMenuCommand). Filtering cannot be performed. (Package Id: '{packageId}', Group Id: '{groupId}', Command Id '{commandId}')
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.CommandManager.CommandPackageNotServiceProvider(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Loaded package with identifier '{packageId}' that owns the command to filter is not a service provider.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.CommandManager.CommandRegistered(System.Object,System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Registered command {commandText} ({commandType}). 
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.CommandManager.DuplicateCommand(System.Object,System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Command with id '{id}' and group '{group}' has already been registered with the menu command service.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.CommandManager.FilterFailed(System.Object,System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Command filter {filter} caused an unexpected exception: {exception}.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.CommandManager.InterceptorFailed(System.Object,System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Command interceptor {interceptor} caused an unexpected exception: {exception}.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.CommandManager.NoMenuCommandService(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Could not retrieve the menu command service from the package with identifier '{packageId}' that owns the command to filter.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.CommandManager.OwningPackageAttributeRequired(System.Object,System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Command type '{type}' does not have the required attribute '{attribute}'.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.CommandManager.OwningPackageNotFound(System.Object,System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Command type '{type}' specifies owning package with id '{packageId}' but it could not be found or loaded.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.CommandManager.OwningPackageNotServiceProvider(System.Object,System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Command type '{type}' specifies owning package with id '{packageId}' which is not a valid service provider.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.CommandManager.PackageGuidMissing(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            In order to register all commands for a given package automatically, the owning package '{package}' must have a [Guid] attribute applied, which must match the commands' corresponding [Command] attribute.
            </summary>
        </member>
        <member name="T:Clide.Properties.Strings.Diagnostics">
            <summary>
            Provides access to string resources.
            </summary>
        </member>
        <member name="P:Clide.Properties.Strings.Diagnostics.FailedToCreateOutputWindow">
            <summary>
            Looks up a localized string similar to: 
            Failed to create output window for diagnostics traces.
            </summary>
        </member>
        <member name="T:Clide.Properties.Strings.Hosting">
            <summary>
            Provides access to string resources.
            </summary>
        </member>
        <member name="P:Clide.Properties.Strings.Hosting.UnsupportedRuntime">
            <summary>
            Looks up a localized string similar to: 
            Unsupported Visual Studio version. Please update Clide.
            </summary>
        </member>
        <member name="T:Clide.Properties.Strings.Host">
            <summary>
            Provides access to string resources.
            </summary>
        </member>
        <member name="P:Clide.Properties.Strings.Host.FailedToInitialize">
            <summary>
            Looks up a localized string similar to: 
            Failed to initialize host.
            </summary>
        </member>
        <member name="T:Clide.Properties.Strings.General">
            <summary>
            Provides access to string resources.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.General.MissingGuidAttribute(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Hosting package '{packageType}' does not have the required [Guid] attribute.
            </summary>
        </member>
        <member name="T:Clide.Properties.Strings.OptionsManager">
            <summary>
            Provides access to string resources.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.OptionsManager.FailedToRegisterPage(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Failed to register page '{pageType}'.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.OptionsManager.ManagedPackageRequired(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            The owning package of a page must be a managed package, inheriting from '{managedPackageBaseType}'.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.OptionsManager.OwningPackageNotFound(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Options page specified package owner with Guid '{owningPackageGuid}', but the package could not be found or loaded.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.OptionsManager.OwningPackageRequired(System.Object,System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Options page of type '{pageType}' does not provide the required '{owningPackageAttributeType}' attribute.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.OptionsManager.PageCategoryRequired(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Options page '{pageType}' must have a Category attribute that specifies the name of the root category node this page shows under in the Tools | Options dialog.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.OptionsManager.PageDisplayNameRequired(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Options page '{pageType}' must have a DisplayName attribute that determines the name of the node under the specified category in the Tools | Options dialog tree.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.OptionsManager.ShellReferenceNotFound(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Could not find reference to Microsoft.VisualStudio.Shell (either 10.0 or 11.0) on the given package type {packageType}.
            </summary>
        </member>
        <member name="P:Clide.Properties.Strings.OptionsManager.Unsupported">
            <summary>
            Looks up a localized string similar to: 
            Tools options pages are not supported in this version of Visual Studio.
            </summary>
        </member>
        <member name="T:Clide.Properties.Strings.Trace">
            <summary>
            Provides access to string resources.
            </summary>
        </member>
        <member name="P:Clide.Properties.Strings.Trace.OutputPaneId">
            <summary>
            Looks up a localized string similar to: 
            66893206-0EF5-4A16-AA10-6EC6B6319F92
            </summary>
        </member>
        <member name="P:Clide.Properties.Strings.Trace.OutputPaneTitle">
            <summary>
            Looks up a localized string similar to: 
            Clide
            </summary>
        </member>
        <member name="P:Clide.Properties.Strings.Trace.RootSource">
            <summary>
            Looks up a localized string similar to: 
            Clide
            </summary>
        </member>
        <member name="T:Clide.Properties.Strings.SettingsManager">
            <summary>
            Provides access to string resources.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.SettingsManager.CannotSaveAsString(System.Object,System.Object,System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Cannot persist setting value of type '{valueType}' from property '{owningType}.{propertyName}'. An appropriate type converter that can convert the value to a string is required.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.SettingsManager.FailedToRead(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Failed to read settings class '{settingsType}' from the settings store.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.SettingsManager.InvalidValue(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Cannot assign value of type '{valueType}' to property '{owningType}.{propertyName}' of type '{propertyType}'. An appropriate type converter is required.
            </summary>
        </member>
        <member name="T:Clide.Properties.Strings.Settings">
            <summary>
            Provides access to string resources.
            </summary>
        </member>
        <member name="P:Clide.Properties.Strings.Settings.AlreadyInitialized">
            <summary>
            Looks up a localized string similar to: 
            Object has already been initialized.
            </summary>
        </member>
        <member name="P:Clide.Properties.Strings.Settings.EndEditWithoutBeginEdit">
            <summary>
            Looks up a localized string similar to: 
            EndEdit invoked without corresponding BeginEdit.
            </summary>
        </member>
        <member name="P:Clide.Properties.Strings.Settings.EndInitWithoutBeginInit">
            <summary>
            Looks up a localized string similar to: 
            EndInit invoked without corresponding BeginInit.
            </summary>
        </member>
        <member name="P:Clide.Properties.Strings.Settings.FailedToRestore">
            <summary>
            Looks up a localized string similar to: 
            Failed to restore original state when editing was cancelled.
            </summary>
        </member>
        <member name="P:Clide.Properties.Strings.Settings.TraceSaved">
            <summary>
            Looks up a localized string similar to: 
            Settings successfully saved.
            </summary>
        </member>
        <member name="T:Clide.Properties.Strings.SolutionNode">
            <summary>
            Provides access to string resources.
            </summary>
        </member>
        <member name="P:Clide.Properties.Strings.SolutionNode.InvalidSolutionFile">
            <summary>
            Looks up a localized string similar to: 
            The solution file is invalid.
            </summary>
        </member>
        <member name="T:Clide.Properties.Strings.VsCommandExtensionAdapter">
            <summary>
            Provides access to string resources.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.VsCommandExtensionAdapter.CannotExecute(System.Object,System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Attempted to execute command '{commandText}' ({commandType}) but current command status does not allow it.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.VsCommandExtensionAdapter.ExecutingCommand(System.Object,System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Executing command '{commandText}' ({commandType}).
            </summary>
        </member>
        <member name="P:Clide.Properties.Strings.VsCommandExtensionAdapter.ExecuteShieldMessage">
            <summary>
            Looks up a localized string similar to: 
            Command did not execute successfully due to an unexpected exception. Please check the output window for additional information.
            </summary>
        </member>
        <member name="P:Clide.Properties.Strings.VsCommandExtensionAdapter.QueryStatusShieldMessage">
            <summary>
            Looks up a localized string similar to: 
            Command could not determine its current status due to an unexpected exception. Please check the output window for additional information.
            </summary>
        </member>
        <member name="T:Clide.Properties.Strings.ConfigProjectProperties">
            <summary>
            Provides access to string resources.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.ConfigProjectProperties.UnsupportedProject(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Project '{projectFile}' must be based on MSBuild in order to support dynamic properties.
            </summary>
        </member>
        <member name="T:Clide.Properties.Strings.SolutionTreeNode">
            <summary>
            Provides access to string resources.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.SolutionTreeNode.SelectionUnsupported(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Selecting element '{itemPath}' is not supported by the underlying project type.
            </summary>
        </member>
        <member name="T:Clide.Properties.Strings.IProjectNodeExtensions">
            <summary>
            Provides access to string resources.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.IProjectNodeExtensions.BuildNoSolution(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            The specified project '{project}' does not have a valid owning solution.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.IProjectNodeExtensions.FailedToLoadAssembly(System.Object,System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Failed to load assemly reference '{reference}' from path '{path}'.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.IProjectNodeExtensions.NoBuildOutput(System.Object,System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Building project '{projectName}' did not generate the expected output assembly '{assemblyFile}'.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.IProjectNodeExtensions.NoTargetAssemblyName(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Could not determine the target assembly name for project '{projectName}'. The project TargetFileName and/or TargetDir properties are empty.
            </summary>
        </member>
        <member name="P:Clide.Properties.Strings.IProjectNodeExtensions.BuildException">
            <summary>
            Looks up a localized string similar to: 
            Failed to invoke build.
            </summary>
        </member>
        <member name="P:Clide.Properties.Strings.IProjectNodeExtensions.InvalidTypeContext">
            <summary>
            Looks up a localized string similar to: 
            Could not retrieve the required type discovery services from the project.
            </summary>
        </member>
        <member name="P:Clide.Properties.Strings.IProjectNodeExtensions.InvalidVsContext">
            <summary>
            Looks up a localized string similar to: 
            Cannot retrieve project types. Project is not a valid Visual Studio project, or the service provider cannot be retrieved from it.
            </summary>
        </member>
        <member name="T:Clide.Properties.Strings.DevEnvFactory">
            <summary>
            Provides access to string resources.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.DevEnvFactory.ClideCantBeMefComponent(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            {clideAssembly} cannot be exported as a MEF component in the hosting extension manifest.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.DevEnvFactory.ClideComponentAlsoMefComponent(System.Object,System.Object)">
            <summary>
            Looks up a localized string similar to: 
            The following assemblies are specified as both Clide components and MEF components in the package manifest '{packageManifest}': {assemblies}. This is typically an error and could result in duplicate exports to the global composition container in Visual Studio. If you want to export some components only as MEF components or Clide components, place them in separate assemblies and configure them separately in the manifest.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.DevEnvFactory.ClideComponentDeclared(System.Object,System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Found Clide component '{component}' to register for composition at '{componentAssembly}'.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.DevEnvFactory.ClideComponentNotFound(System.Object,System.Object,System.Object)">
            <summary>
            Looks up a localized string similar to: 
            The extension manifest file '{packageManifest}' specified a Clide component '{clideComponent}' that was not found at '{assemblyFile}'.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.DevEnvFactory.ClideNotNecessaryAsComponent(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            The Clide main assembly does not need to be added as Clide component in the extension manifest file '{packageManifest}'.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.DevEnvFactory.CompositionErrors(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Composition errors prevented the successfull creation of the development environment API. All {primaryRejectionCount} primary rejection errors will be logged.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.DevEnvFactory.DetectedInstallPath(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Detected hosting package installation path at '{installPath}'.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.DevEnvFactory.ExtensionManifestFound(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Extension manifest for hosting package found at '{manifestFile}'.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.DevEnvFactory.ExtensionManifestNotFound(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Extension manifest for hosting package not found at expected location '{manifestFile}'.
            </summary>
        </member>
        <member name="P:Clide.Properties.Strings.DevEnvFactory.CreatingComposition">
            <summary>
            Looks up a localized string similar to: 
            Initializing development environment composition.
            </summary>
        </member>
        <member name="T:Clide.Properties.Strings.IServiceProviderExtensions">
            <summary>
            Provides access to string resources.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.IServiceProviderExtensions.MissingGuidAttribute(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Specified package type '{packageType}' does not have the required [Guid] attribute.
            </summary>
        </member>
        <member name="T:Clide.Properties.Strings.ComponentModelExtensions">
            <summary>
            Provides access to string resources.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.ComponentModelExtensions.ExportProviderIsNotCompositionService(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            The given export provider '{provider}' does not implement the required ICompositionService interface.
            </summary>
        </member>
        <member name="T:Clide.Properties.Strings.ISolutionNodeExtensions">
            <summary>
            Provides access to string resources.
            </summary>
        </member>
        <member name="P:Clide.Properties.Strings.ISolutionNodeExtensions.BuildException">
            <summary>
            Looks up a localized string similar to: 
            Failed to invoke build.
            </summary>
        </member>
        <member name="P:Clide.Properties.Strings.ISolutionNodeExtensions.BuildNotSupported">
            <summary>
            Looks up a localized string similar to: 
            The specified solution does not support builds.
            </summary>
        </member>
        <member name="T:Clide.Properties.Strings.CompositionSource">
            <summary>
            Provides access to string resources.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.CompositionSource.ImportManyRequired(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            In order to retrieve the multiple components of type {componentType} from Visual Studio composition, the [ImportMany] annotation has to be used.
            </summary>
        </member>
        <member name="T:Clide.Properties.Strings.OutputWindowManager">
            <summary>
            Provides access to string resources.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.OutputWindowManager.CreatingPane(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Creating output pane '{title}' since it doesn't exist already.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.OutputWindowManager.FailedToCreatePane(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Failed to create output window pane '{title}'.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.OutputWindowManager.RetrievingPane(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Retrieving potentially existing output pane '{title}'.
            </summary>
        </member>
        <member name="M:Clide.Properties.Strings.OutputWindowManager.TraceInitializing(System.Object)">
            <summary>
            Looks up a localized string similar to: 
            Initializing trace output pane '{title}'.
            </summary>
        </member>
        <member name="T:Clide.IReferenceProvider">
            <summary>
            Provides the basic non-generic protocol for the reference provider.
            Implementations should inherit from <see cref="T:Clide.IReferenceProvider`1"/>.
            </summary>
            <remarks>
            A reference provider is responsible for converting from object instances 
            to references like file://foo.txt. The <see cref="P:Clide.IReferenceProvider.Scheme"/> determines 
            which provider will be invoked to resolve which references, as well 
            as the type to be resolved. 
            </remarks>
        </member>
        <member name="P:Clide.IReferenceProvider.Scheme">
            <summary>
            Gets the scheme of the provider. All created references 
            from this provider must use this scheme followed by a colon.
            </summary>
            <remarks>
            The scheme is case-sensitive when locating the provider for 
            a given reference.
            </remarks>
        </member>
        <member name="T:Clide.IReferenceProviderRegistry">
            <summary>
            Provides a registration mechanism for reference providers 
            that are used by the <see cref="T:Clide.IReferenceService"/>.
            </summary>
        </member>
        <member name="M:Clide.IReferenceProviderRegistry.Register(Clide.IReferenceProvider)">
            <summary>
            Registers the specified provider with the service.
            </summary>
            <param name="provider">The reference provider to register.</param>
            <exception cref="T:System.ArgumentException">A provider has already been registered 
            for the same <see cref="P:Clide.IReferenceProvider.Scheme"/> scheme.</exception>
        </member>
        <member name="M:Clide.IReferenceProviderRegistry.IsRegistered(System.String)">
            <summary>
            Checks if the reference scheme is registered as a valid provider.
            </summary>
            <param name="scheme">The reference scheme to be checked, such as "vsix" or "project", with or without the trailing ":" or "://".</param>
            <returns><see langword="true"/>, if a reference provider exists for the scheme; otherwise <see langword="false"/></returns>
        </member>
        <member name="T:Clide.IReferenceProvider`1">
            <summary>
            Allows to create and resolve references for the target type T.
            </summary>
            <typeparam name="T">The type of instance to be resolved or referenced</typeparam>
            <remarks>
            The <see cref="M:Clide.IReferenceProvider`1.TryCreateReference(`0)"/>, if it succeeds, must always 
            return references that start with the <see cref="P:Clide.IReferenceProvider.Scheme"/> 
            followed by a colon, like vsix://my-vsix-identifier or project:my-project-guid
            <para>
            The references are intentionally strings and not <see cref="T:System.Uri"/> because the 
            <see cref="T:System.Uri"/> type imposes more strict rules than are required for 
            a general-purpose private referencing service.
            </para>
            </remarks>
        </member>
        <member name="M:Clide.IReferenceProvider`1.TryCreateReference(`0)">
            <summary>
            Tries to create a reference for the instance of T.
            </summary>
            <param name="instance">The instance to create a reference for.</param>
            <returns>The reference to the instance or <see langword="null"/> if a reference 
            cannot be created for the given instance.</returns>
        </member>
        <member name="M:Clide.IReferenceProvider`1.TryOpen(`0)">
            <summary>
            Tries to open the instance in the appropiate view.
            </summary>
            <param name="instance">The instance to open in its default view.</param>
            <returns><see langword="true"/> if the instance could be opened; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Clide.IReferenceProvider`1.TryResolveReference(System.String)">
            <summary>
            Tries to resolve the given reference to an instance of T.
            </summary>
            <param name="reference">The reference to try to resolve.</param>
            <returns>The resolved reference or <see langword="null"/> if it could 
            not be resolved to a valid instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Clide.IReferenceService">
            <summary>
            Provides a general mechanism to create reference handles to objects 
            and to resolve them to their referenced instance later.
            </summary>
            <remarks>
            This service manages references by allowing creation, resolution and 
            opening of those references. Reference providers implementing 
            <see cref="T:Clide.IReferenceProvider`1"/> are registered with the 
            <see cref="T:Clide.IReferenceProviderRegistry"/>, which is used by this service 
            to determine which providers to invoke according to the received instance 
            types or the optional scheme passed to the relevant methods.
            <para>
            The references are intentionally strings and not <see cref="T:System.Uri"/> because the 
            <see cref="T:System.Uri"/> type imposes more strict rules than are required for 
            a general-purpose private referencing service, since it adheres to the 
            internet standard, which is beyond the requirements for this general-purpose 
            private referencing system.
            </para>
            <para>
            This service will attempt to find the most appropriate provider according 
            to the instance types.
            </para>
            <para>
            The service also ensures that providers return valid references according 
            to their specified <see cref="P:Clide.IReferenceProvider.Scheme"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Clide.IReferenceService.TryCreateReference``1(``0,System.String)">
            <summary>
            Tries to create a reference for the instance of T.
            </summary>
            <typeparam name="T">The type of the instance to create a reference for.</typeparam>
            <param name="instance">The instance to create a reference for.</param>
            <param name="scheme">The optional scheme to use to determine how the reference should be created. If 
            none is specified, a registered <see cref="T:Clide.IReferenceProvider`1"/> of the given
            <typeparamref name="T"/> would create the reference.</param>
            <returns>The reference to the instance or <see langword="null"/> if no registered 
            provider could create the reference.</returns>
        </member>
        <member name="M:Clide.IReferenceService.TryOpen``1(``0,System.String)">
            <summary>
            Tries to open the instance in the appropiate view.
            </summary>
            <typeparam name="T">The type of the instance to open.</typeparam>
            <param name="instance">The instance to open in its default view.</param>
            <param name="scheme">The optional scheme to use to determine how the reference should be opened. 
            If none is specified, a registered <see cref="T:Clide.IReferenceProvider`1"/> of the given
            <typeparamref name="T"/> would open the default view.</param>
            <returns><see langword="true"/> if the instance could be opened; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Clide.IReferenceService.TryResolveReference``1(System.String)">
            <summary>
            Tries to resolve the given reference to an instance of T based on the 
            reference scheme and the registered reference providers.
            </summary>
            <typeparam name="T">The type of the instance to be resolved</typeparam>
            <param name="reference">The reference to try to resolve.</param>
            <returns>The resolved reference or <see langword="null"/> if it could 
            not be resolved to a valid instance of <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="reference"/> does not start with a scheme followed by a colon.</exception>
        </member>
        <member name="T:Clide.ReferenceService">
            <summary>
            Default implementation of the reference service.
            </summary>
        </member>
        <member name="M:Clide.ReferenceService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.ReferenceService"/> class.
            </summary>
        </member>
        <member name="M:Clide.ReferenceService.#ctor(System.Collections.Generic.IEnumerable{Clide.IReferenceProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.ReferenceService"/> class.
            </summary>
            <param name="providers">The registered providers.</param>
        </member>
        <member name="M:Clide.ReferenceService.Register(Clide.IReferenceProvider)">
            <summary>
            Registers the specified provider with the service.
            </summary>
            <param name="provider">The reference provider to register.</param>
            <exception cref="T:System.ArgumentException">A provider has already been registered 
            for the same <see cref="P:Clide.IReferenceProvider.Scheme"/> scheme.</exception>
        </member>
        <member name="M:Clide.ReferenceService.IsRegistered(System.String)">
            <summary>
            Checks if the reference scheme is registered as a valid provider.
            </summary>
            <param name="scheme">The reference scheme to be checked, such as "vsix" or "project", with or without the trailing ":" or "://".</param>
            <returns>
              <see langword="true" />, if a reference provider exists for the scheme; otherwise <see langword="false" />
            </returns>
        </member>
        <member name="M:Clide.ReferenceService.TryResolveReference``1(System.String)">
            <summary>
            Tries to resolve the given reference to an instance of T based on the
            reference scheme and the registered reference providers.
            </summary>
            <typeparam name="T">The type of the instance to be resolved</typeparam>
            <param name="reference">The reference to try to resolve.</param>
            <returns>
            The resolved reference or <see langword="null"/> if it could
            not be resolved to a valid instance of <typeparamref name="T"/>.
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Clide.ReferenceService.TryOpen``1(``0,System.String)">
            <summary>
            Tries to open the instance in the appropiate view.
            </summary>
            <typeparam name="T">The type of the instance to open.</typeparam>
            <param name="instance">The instance to open in its default view.</param>
            <param name="scheme">The optional scheme to use to determine how the reference should be opened.
            If none is specified, a registered <see cref="T:Clide.IReferenceProvider`1"/> of the given
            <typeparamref name="T"/> would open the default view.</param>
            <returns>
              <see langword="true"/> if the instance could be opened; <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Clide.ReferenceService.TryCreateReference``1(``0,System.String)">
            <summary>
            Tries to create a reference for the instance of T.
            </summary>
            <typeparam name="T">The type of the instance to create a reference for.</typeparam>
            <param name="instance">The instance to create a reference for.</param>
            <param name="scheme">The optional scheme to use to determine how the reference should be created. If
            none is specified, a registered <see cref="T:Clide.IReferenceProvider`1"/> of the given
            <typeparamref name="T"/> would create the reference.</param>
            <returns>
            The reference to the instance or <see langword="null"/> if no registered
            provider could create the reference.
            </returns>
        </member>
        <member name="P:Clide.ReferenceService.Providers">
            <summary>
            Gets the registered providers.
            </summary>
        </member>
        <member name="T:Clide.ServiceLocator">
            <summary>
            Locates global services and components inside Visual Studio, in a thread-safe way, 
            including Clide own components and VS MEF-exported values in a unified way.
            </summary>
            <remarks>
            This locator allows retrieval of everything exposed in VS including Clide, such 
            as <code>ServiceLocator.GlobalLocator.GetInstance&lt;DTE&gt;()</code>, 
            <code>ServiceLocator.GlobalLocator.GetInstance&lt;IVsShell&gt;()</code>, 
            <code>ServiceLocator.GlobalLocator.GetInstance&lt;IDevEnv&gt;()</code>, etc.
            </remarks>
        </member>
        <member name="P:Clide.ServiceLocator.GlobalLocator">
            <summary>
            Gets the global locator.
            </summary>
        </member>
        <member name="M:Clide.OptionsManager.AddPage(Clide.IOptionsPage)">
            <summary>
            Adds the page to the manager using the given owning package identifier.
            </summary>
        </member>
        <member name="T:Clide.OptionsPage`2">
            <summary>
            Base class for options pages.
            </summary>
            <typeparam name="TControl">The type of the control implementing the user interface.</typeparam>
            <typeparam name="TSettings">The type of the settings that persist the values of the page.</typeparam>
        </member>
        <member name="M:Clide.OptionsPage`2.#ctor(Clide.IOptionsPageWindowFactory,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.OptionsPage`2"/> class.
            </summary>
            <param name="windowFactory">The window factory.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:Clide.OptionsPage`2.Handle">
            <summary>
            Gets the handle to the window represented by the implementer.
            </summary>
            <returns>A handle to the window represented by the implementer.</returns>
        </member>
        <member name="T:Clide.OptionsPageAttribute">
            <summary>
            Marks a component as an options page for registration purposes.
            </summary>
        </member>
        <member name="M:Clide.OptionsPageAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.OptionsPageAttribute"/> class.
            </summary>
        </member>
        <member name="T:Clide.OptionsPageWindowFactory.ToolsOptionsPageWin32Window.DialogSubclass">
            <devdoc>
                This class derives from NativeWindow to provide a hook
                into the window handle.  We use this hook so we can
                respond to property sheet window messages that VS
                will send us.
            </devdoc>
        </member>
        <member name="M:Clide.OptionsPageWindowFactory.ToolsOptionsPageWin32Window.DialogSubclass.#ctor(Clide.OptionsPageWindowFactory.EditableDialogPage)">
            <devdoc>
                Create a new DialogSubclass
            </devdoc>
        </member>
        <member name="M:Clide.OptionsPageWindowFactory.ToolsOptionsPageWin32Window.DialogSubclass.WndProc(System.Windows.Forms.Message@)">
            <devdoc>
                Override for WndProc to handle our PSP messages
            </devdoc>
        </member>
        <member name="T:Clide.Solution.IProjectNodeExtensions">
            <summary>
            Provides usability extensions to the <see cref="T:Clide.Solution.IProjectNode"/> interface.
            </summary>
        </member>
        <member name="M:Clide.Solution.IProjectNodeExtensions.Build(Clide.Solution.IProjectNode)">
            <summary>
            Builds the specified project.
            </summary>
            <param name="project">The project to build.</param>
            <exception cref="T:System.ArgumentException">The project has no <see cref="P:Clide.Solution.ISolutionExplorerNode.OwningSolution"/>.</exception>
            <returns><see langword="true"/> if the build succeeded; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Clide.Solution.IProjectNodeExtensions.GetOutputAssembly(Clide.Solution.IProjectNode)">
            <summary>
            Gets the output assembly of the given project. If the project 
            was never built before, it's built before returning the output 
            assembly.
            </summary>
            <param name="project">The project to get the output assembly from.</param>
        </member>
        <member name="M:Clide.Solution.IProjectNodeExtensions.GetReferencedAssemblies(Clide.Solution.IProjectNode)">
            <summary>
            Gets the referenced assemblies from the given project.
            </summary>
            <param name="project">The project containing references.</param>
        </member>
        <member name="T:Clide.Solution.ISolutionNodeExtensions">
            <summary>
            Provides usability extensions to the <see cref="T:Clide.Solution.ISolutionNode"/> interface.
            </summary>
        </member>
        <member name="M:Clide.Solution.ISolutionNodeExtensions.Build(Clide.Solution.ISolutionNode)">
            <summary>
            Starts a build of the solution.
            </summary>
        </member>
        <member name="M:Clide.Solution.ISolutionNodeExtensions.FindProjects(Clide.Solution.ISolutionNode)">
            <summary>
            Finds all the project nodes in the solution.
            </summary>
            <param name="solution">The solution to traverse.</param>
            <returns>All project nodes that were found.</returns>
        </member>
        <member name="M:Clide.Solution.ISolutionNodeExtensions.FindProjects(Clide.Solution.ISolutionNode,System.Func{Clide.Solution.IProjectNode,System.Boolean})">
            <summary>
            Finds all projects in the solution matching the given predicate.
            </summary>
            <param name="solution">The solution to traverse.</param>
            <param name="predicate">Predicate used to match projects.</param>
            <returns>All project nodes matching the given predicate that were found.</returns>
        </member>
        <member name="M:Clide.Solution.ISolutionNodeExtensions.FindProject(Clide.Solution.ISolutionNode,System.Func{Clide.Solution.IProjectNode,System.Boolean})">
            <summary>
            Finds the first project in the solution matching the given predicate.
            </summary>
            <param name="solution">The solution to traverse.</param>
            <param name="predicate">Predicate used to match projects.</param>
            <returns>The first project matching the given predicate, or <see langword="null"/>.</returns>
        </member>
        <member name="T:Clide.Solution.ISolutionVisitor">
            <summary>
            Provides a hierarchical visitor pattern interface for the solution model.
            </summary>
        </member>
        <member name="M:Clide.Solution.ISolutionVisitor.VisitEnter(Clide.Solution.ISolutionNode)">
            <summary>
            Begins visiting the solution.
            </summary>
            <param name="solution">The solution being visited.</param>
            <returns><see langword="true"/> if the solution child nodes should be visited; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Clide.Solution.ISolutionVisitor.VisitLeave(Clide.Solution.ISolutionNode)">
            <summary>
            Ends visiting the solution.
            </summary>
            <param name="solution">The solution being visited.</param>
            <returns>The result of the solution traversal operation.</returns>
        </member>
        <member name="M:Clide.Solution.ISolutionVisitor.VisitEnter(Clide.Solution.ISolutionItemNode)">
            <summary>
            Begins visiting a solution item.
            </summary>
            <param name="solutionItem">The solution item being visited.</param>
            <returns><see langword="true"/> if the solution item children should be visited; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Clide.Solution.ISolutionVisitor.VisitLeave(Clide.Solution.ISolutionItemNode)">
            <summary>
            Ends visiting a solution item.
            </summary>
            <param name="solutionItem">The solution item being visited.</param>
            <returns><see langword="true"/> if the solution item siblings should be visited; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Clide.Solution.ISolutionVisitor.VisitEnter(Clide.Solution.ISolutionFolderNode)">
            <summary>
            Begins visiting a solution folder.
            </summary>
            <param name="solutionFolder">The solution folder being visited.</param>
            <returns><see langword="true"/> if the solution folder children should be visited; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Clide.Solution.ISolutionVisitor.VisitLeave(Clide.Solution.ISolutionFolderNode)">
            <summary>
            Ends visiting a solution folder.
            </summary>
            <param name="solutionFolder">The solution folder being visited.</param>
            <returns><see langword="true"/> if the solution folder siblings should be visited; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Clide.Solution.ISolutionVisitor.VisitEnter(Clide.Solution.IProjectNode)">
            <summary>
            Begins visiting a project.
            </summary>
            <param name="project">The project being visited.</param>
            <returns><see langword="true"/> if the project children should be visited; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Clide.Solution.ISolutionVisitor.VisitLeave(Clide.Solution.IProjectNode)">
            <summary>
            Ends visiting a project.
            </summary>
            <param name="project">The project being visited.</param>
            <returns><see langword="true"/> if the project siblings should be visited; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Clide.Solution.ISolutionVisitor.VisitEnter(Clide.Solution.IFolderNode)">
            <summary>
            Begins visiting a project folder.
            </summary>
            <param name="folder">The project folder being visited.</param>
            <returns><see langword="true"/> if the project folder children should be visited; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Clide.Solution.ISolutionVisitor.VisitLeave(Clide.Solution.IFolderNode)">
            <summary>
            Ends visiting a project folder.
            </summary>
            <param name="folder">The project folder being visited.</param>
            <returns><see langword="true"/> if the project folder siblings should be visited; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Clide.Solution.ISolutionVisitor.VisitEnter(Clide.Solution.IItemNode)">
            <summary>
            Begins visiting a project item.
            </summary>
            <param name="item">The project item being visited.</param>
            <returns><see langword="true"/> if the project item children should be visited; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Clide.Solution.ISolutionVisitor.VisitLeave(Clide.Solution.IItemNode)">
            <summary>
            Ends visiting a project item.
            </summary>
            <param name="item">The project item being visited.</param>
            <returns><see langword="true"/> if the project item siblings should be visited; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Clide.Solution.ISolutionVisitor.VisitEnter(Clide.Solution.IReferencesNode)">
            <summary>
            Begins visiting a project references.
            </summary>
            <param name="references">The project's references being visited.</param>
            <returns><see langword="true"/> if the project references should be visited; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Clide.Solution.ISolutionVisitor.VisitLeave(Clide.Solution.IReferencesNode)">
            <summary>
            Begins visiting a project references.
            </summary>
            <param name="references">The project's references being visited.</param>
            <returns><see langword="true"/> if the project references siblings should be visited; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Clide.Solution.ISolutionVisitor.VisitEnter(Clide.Solution.IReferenceNode)">
            <summary>
            Begins visiting a project reference.
            </summary>
            <param name="reference">The project reference being visited.</param>
            <returns><see langword="true"/> if the project reference children should be visited; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Clide.Solution.ISolutionVisitor.VisitLeave(Clide.Solution.IReferenceNode)">
            <summary>
            Ends visiting a project reference.
            </summary>
            <param name="reference">The project reference being visited.</param>
            <returns><see langword="true"/> if the project reference siblings should be visited; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Clide.Solution.ISolutionNodeExtensions.FilteringProjectsVisitor.VisitEnter(Clide.Solution.IProjectNode)">
            <summary>
            Don't traverse project child elements.
            </summary>
        </member>
        <member name="T:Clide.Solution.SolutionVisitable">
            <summary>
            Implements the hierarchical visitor traversal for the solution.
            </summary>
        </member>
        <member name="T:Clide.Solution.SolutionVisitor">
            <summary>
            Convenience default implementation of <see cref="T:Clide.Solution.ISolutionVisitor"/> that 
            just visits the entire solution hierarchy.
            </summary>
        </member>
        <member name="M:Clide.Solution.SolutionVisitor.VisitEnter(Clide.Solution.ISolutionNode)">
            <summary>
            Begins visiting the solution.
            </summary>
            <param name="solution">The solution being visited.</param>
            <returns>
              <see langword="true" /> if the solution child nodes should be visited; <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:Clide.Solution.SolutionVisitor.VisitLeave(Clide.Solution.ISolutionNode)">
            <summary>
            Ends visiting the solution.
            </summary>
            <param name="solution">The solution being visited.</param>
            <returns>
            The result of the solution traversal operation.
            </returns>
        </member>
        <member name="M:Clide.Solution.SolutionVisitor.VisitEnter(Clide.Solution.ISolutionItemNode)">
            <summary>
            Begins visiting a solution item.
            </summary>
            <param name="solutionItem">The solution item being visited.</param>
            <returns>
              <see langword="true" /> if the solution item children should be visited; <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:Clide.Solution.SolutionVisitor.VisitLeave(Clide.Solution.ISolutionItemNode)">
            <summary>
            Ends visiting a solution item.
            </summary>
            <param name="solutionItem">The solution item being visited.</param>
            <returns>
              <see langword="true" /> if the solution item siblings should be visited; <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:Clide.Solution.SolutionVisitor.VisitEnter(Clide.Solution.ISolutionFolderNode)">
            <summary>
            Begins visiting a solution folder.
            </summary>
            <param name="solutionFolder">The solution folder being visited.</param>
            <returns>
              <see langword="true" /> if the solution folder children should be visited; <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:Clide.Solution.SolutionVisitor.VisitLeave(Clide.Solution.ISolutionFolderNode)">
            <summary>
            Ends visiting a solution folder.
            </summary>
            <param name="solutionFolder">The solution folder being visited.</param>
            <returns>
              <see langword="true" /> if the solution folder siblings should be visited; <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:Clide.Solution.SolutionVisitor.VisitEnter(Clide.Solution.IProjectNode)">
            <summary>
            Begins visiting a project.
            </summary>
            <param name="project">The project being visited.</param>
            <returns>
              <see langword="true" /> if the project children should be visited; <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:Clide.Solution.SolutionVisitor.VisitLeave(Clide.Solution.IProjectNode)">
            <summary>
            Ends visiting a project.
            </summary>
            <param name="project">The project being visited.</param>
            <returns>
              <see langword="true" /> if the project siblings should be visited; <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:Clide.Solution.SolutionVisitor.VisitEnter(Clide.Solution.IFolderNode)">
            <summary>
            Begins visiting a project folder.
            </summary>
            <param name="folder">The project folder being visited.</param>
            <returns>
              <see langword="true" /> if the project folder children should be visited; <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:Clide.Solution.SolutionVisitor.VisitLeave(Clide.Solution.IFolderNode)">
            <summary>
            Ends visiting a project folder.
            </summary>
            <param name="folder">The project folder being visited.</param>
            <returns>
              <see langword="true" /> if the project folder siblings should be visited; <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:Clide.Solution.SolutionVisitor.VisitEnter(Clide.Solution.IItemNode)">
            <summary>
            Begins visiting a project item.
            </summary>
            <param name="item">The project item being visited.</param>
            <returns>
              <see langword="true" /> if the project item children should be visited; <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:Clide.Solution.SolutionVisitor.VisitLeave(Clide.Solution.IItemNode)">
            <summary>
            Ends visiting a project item.
            </summary>
            <param name="item">The project item being visited.</param>
            <returns>
              <see langword="true" /> if the project item siblings should be visited; <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:Clide.Solution.SolutionVisitor.VisitEnter(Clide.Solution.IReferencesNode)">
            <summary>
            Begins visiting a project references.
            </summary>
            <param name="references">The project's references being visited.</param>
            <returns>
              <see langword="true" /> if the project references should be visited; <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:Clide.Solution.SolutionVisitor.VisitLeave(Clide.Solution.IReferencesNode)">
            <summary>
            Begins visiting a project references.
            </summary>
            <param name="references">The project's references being visited.</param>
            <returns>
              <see langword="true" /> if the project references siblings should be visited; <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:Clide.Solution.SolutionVisitor.VisitEnter(Clide.Solution.IReferenceNode)">
            <summary>
            Begins visiting a project reference.
            </summary>
            <param name="reference">The project reference being visited.</param>
            <returns>
              <see langword="true" /> if the project reference children should be visited; <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:Clide.Solution.SolutionVisitor.VisitLeave(Clide.Solution.IReferenceNode)">
            <summary>
            Ends visiting a project reference.
            </summary>
            <param name="reference">The project reference being visited.</param>
            <returns>
              <see langword="true" /> if the project reference siblings should be visited; <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="T:Clide.OutputWindowManager">
            <summary>
             Manages the output of trace messages to an output window pane.
            </summary>
        </member>
        <member name="M:Clide.OutputWindowManager.#ctor(System.IServiceProvider,Clide.Events.IShellEvents,System.Lazy{Clide.IUIThread})">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.OutputWindowManager"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="shellEvents">The shell events.</param>
            <param name="uiThread">The UI thread.</param>
        </member>
        <member name="M:Clide.OutputWindowManager.Dispose">
            <summary>
            Cleans resources used by the manager.
            </summary>
        </member>
        <member name="T:Clide.ITreeNodeExtensions">
            <summary>
            Provides node traversal extensions.
            </summary>
        </member>
        <member name="M:Clide.ITreeNodeExtensions.Ancestors(Clide.ITreeNode)">
            <summary>
            Traverses upwards the ancestors of the specified node.
            </summary>
        </member>
        <member name="M:Clide.ITreeNodeExtensions.Traverse(Clide.ITreeNode)">
            <summary>
            Traverses the specified node and all its descendents. The node itself 
            also exists in the returned enumeration. To traverse only the 
            descendents, traverse its <see cref="P:Clide.ITreeNode.Nodes"/> 
            property instead.
            </summary>
            <param name="node">The node to traverse.</param>
            <returns>The <paramref name="node"/> itself and all of its descendent nodes.</returns>
        </member>
        <member name="M:Clide.ITreeNodeExtensions.Traverse(System.Collections.Generic.IEnumerable{Clide.ITreeNode})">
            <summary>
            Traverses the specified list of nodes and all their descendents. The nodes
            in the list are included in the returned enumeration.
            </summary>
            <param name="nodes">The nodes to traverse.</param>
            <returns>The <paramref name="nodes"/> themselves and all of their descendent nodes.</returns>
        </member>
        <member name="T:Clide.Solution.ISolutionExplorerNodeFactory">
            <summary>
            Internal interface used by components that need to create solution 
            explorer nodes without having to pass the parent element (i.e. 
            outside of traversal scenarios, like adapters, selected element 
            retrieval, etc.)
            </summary>
        </member>
        <member name="M:Clide.Solution.ISolutionExplorerNodeFactory.Create(Clide.IVsSolutionHierarchyNode)">
            <summary>
            Creates the specified solution explorer node for the given hierarchy.
            </summary>
        </member>
        <member name="T:Clide.ITreeNodeFactory`1">
            <summary>
            Factory interface that creates tree nodes to represent 
            an underlying model.
            </summary>
            <typeparam name="TModel">The type of the model represented 
            by the tree node.</typeparam>
        </member>
        <member name="M:Clide.ITreeNodeFactory`1.Supports(`0)">
            <summary>
            Whether this factory supports the given model.
            </summary>
        </member>
        <member name="M:Clide.ITreeNodeFactory`1.CreateNode(System.Lazy{Clide.ITreeNode},`0)">
            <summary>
            Creates the node for the given model and parent node.
            </summary>
        </member>
        <member name="T:Clide.Solution.IProjectConfiguration">
            <summary>
            Project configuration information
            </summary>
        </member>
        <member name="P:Clide.Solution.IProjectConfiguration.ActiveConfigurationName">
            <summary>
            Gets the combined configuration and platform that makes 
            the configuration name for use in <see cref="M:Clide.Solution.IProjectNode.PropertiesFor(System.String)"/>, 
            such as "Debug|AnyCPU".
            </summary>
        </member>
        <member name="P:Clide.Solution.IProjectConfiguration.ActiveConfiguration">
            <summary>
            Gets the active project configuration.
            </summary>
        </member>
        <member name="P:Clide.Solution.IProjectConfiguration.ActivePlatform">
            <summary>
            Gets the active target platform.
            </summary>
        </member>
        <member name="P:Clide.Solution.IProjectConfiguration.Configurations">
            <summary>
            Gets all the configuration names.
            </summary>
        </member>
        <member name="P:Clide.Solution.IProjectConfiguration.Platforms">
            <summary>
            Gets all the target platform names.
            </summary>
        </member>
        <member name="T:Clide.Solution.ISolutionExplorerNode">
            <summary>
            Interface implemented by all nodes in the solution explorer tree.
            </summary>
        </member>
        <member name="T:Clide.ITreeNode">
            <summary>
            General-purpose tree node interface used by all supported tree structures in VS.
            </summary>
        </member>
        <member name="M:Clide.ITreeNode.As``1">
            <summary>
            Tries to smart-cast this node to the give type.
            </summary>
            <typeparam name="T">Type to smart-cast to.</typeparam>
            <returns>The casted value or null if it cannot be converted to that type.</returns>
        </member>
        <member name="M:Clide.ITreeNode.Collapse">
            <summary>
            Collapses this node.
            </summary>
        </member>
        <member name="M:Clide.ITreeNode.Expand(System.Boolean)">
            <summary>
            Expands the node, optionally in a recursive fashion.
            </summary>
            <param name="recursively">if set to <c>true</c>, expands recursively</param>
        </member>
        <member name="M:Clide.ITreeNode.Select(System.Boolean)">
            <summary>
            Selects the node, optionally allowing multiple selection.
            </summary>
            <param name="allowMultiple">if set to <c>true</c>, adds this node to the current selection.</param>
        </member>
        <member name="P:Clide.ITreeNode.DisplayName">
            <summary>
            Gets the node display name.
            </summary>
        </member>
        <member name="P:Clide.ITreeNode.IsHidden">
            <summary>
            Gets a value indicating whether this node is hidden.
            </summary>
        </member>
        <member name="P:Clide.ITreeNode.IsVisible">
            <summary>
            Gets a value indicating whether this node is visible.
            </summary>
        </member>
        <member name="P:Clide.ITreeNode.IsSelected">
            <summary>
            Gets a value indicating whether this node is selected.
            </summary>
        </member>
        <member name="P:Clide.ITreeNode.IsExpanded">
            <summary>
            Gets a value indicating whether this node is expanded.
            </summary>
        </member>
        <member name="P:Clide.ITreeNode.Parent">
            <summary>
            Gets the parent of this node.
            </summary>
        </member>
        <member name="P:Clide.ITreeNode.Nodes">
            <summary>
            Gets the child nodes.
            </summary>
        </member>
        <member name="M:Clide.Solution.ISolutionExplorerNode.Accept(Clide.Solution.ISolutionVisitor)">
            <summary>
            Accepts the specified visitor for traversal.
            </summary>
            <returns><see langword="true"/> if the operation should continue with other sibling or child nodes; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="P:Clide.Solution.ISolutionExplorerNode.Kind">
            <summary>
            Gets the kind of node.
            </summary>
        </member>
        <member name="P:Clide.Solution.ISolutionExplorerNode.OwningSolution">
            <summary>
            Gets the owning solution.
            </summary>
        </member>
        <member name="P:Clide.Solution.ISolutionExplorerNode.Nodes">
            <summary>
            Gets the child nodes.
            </summary>
        </member>
        <member name="T:Clide.Solution.ISolutionItemNode">
            <summary>
            Interface implemented by solution item nodes.
            </summary>
        </member>
        <member name="P:Clide.Solution.ISolutionItemNode.OwningSolutionFolder">
            <summary>
            Gets the owning solution folder.
            </summary>
        </member>
        <member name="P:Clide.Solution.ISolutionItemNode.PhysicalPath">
            <summary>
            Gets the physical path of the solution item.
            </summary>
        </member>
        <member name="T:Clide.GlobalServiceProvider">
            <summary>
            Locates global services inside Visual Studio, in a thread-safe way, unlike 
            the VS Shell version. To also retrieve components exposed via MEF, 
            use the <see cref="T:Clide.ServiceLocator"/> instead.
            </summary>
        </member>
        <member name="P:Clide.GlobalServiceProvider.Instance">
            <summary>
            Gets the global service provider.
            </summary>
        </member>
        <member name="T:Clide.VisualStudio.VsHierarchyExtensions">
            <summary>
            Provides extensions for Visual Studio low-level <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"/> API.
            </summary>
        </member>
        <member name="M:Clide.VisualStudio.VsHierarchyExtensions.Properties(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
            <summary>
            Provides access to the hierarchy properties for a specific child item.
            </summary>
        </member>
        <member name="M:Clide.VisualStudio.VsHierarchyExtensions.Properties(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Provides access to the properties of the hierarchy root itself (i.e. the solution, a project, etc.).
            </summary>
        </member>
        <member name="T:TypeInheritance">
            <summary>
            Provides type inheritance information for a type.
            </summary>
        </member>
        <member name="M:TypeInheritance.#ctor(System.Type,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TypeInheritance"/> class for the given 
            type and distance from the type root.
            </summary>
        </member>
        <member name="M:TypeInheritance.Equals(TypeInheritance)">
            <summary>
            Compares the current instance with the value provided.
            </summary>
        </member>
        <member name="M:TypeInheritance.Equals(System.Object)">
            <summary>
            Compares the current instance with the value provided.
            </summary>
        </member>
        <member name="M:TypeInheritance.Equals(TypeInheritance,TypeInheritance)">
            <summary>
            Compares two instances for equality.
            </summary>
        </member>
        <member name="M:TypeInheritance.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="P:TypeInheritance.Distance">
            <summary>
            Gets the distance from the current type inheritance to the root that was used 
            to build the hierarchy.
            </summary>
        </member>
        <member name="P:TypeInheritance.Type">
            <summary>
            Gets the type that owns the <see cref="P:TypeInheritance.Inheritance"/>.
            </summary>
        </member>
        <member name="P:TypeInheritance.Inheritance">
            <summary>
            Gets the inherited types from <see cref="P:TypeInheritance.Type"/>.
            </summary>
        </member>
        <member name="T:TypeInheritanceExtension">
            <summary>
            Provides the <see cref="M:TypeInheritanceExtension.GetInheritanceTree(System.Type)"/> extension method to retrieve 
            inheritance tree information for a type.
            </summary>
        </member>
        <member name="M:TypeInheritanceExtension.GetInheritanceTree(System.Type)">
            <summary>
            Gets the exact inheritance tree information for the given type. The first element 
            in the inheritance is the received type itself.
            </summary>
        </member>
        <member name="T:Clide.Solution.AggregateHierarchyFactory">
            <summary>
            This factory caches the map between hierarchy items and the concrete 
            node factories that support them, so that the node creation is 
            very fast.
            </summary>
        </member>
        <member name="T:Clide.Solution.DefaultHierarchyFactory">
            <summary>
            This factory is the one that serves as the single dependency 
            that all individual node factories reuse for their own 
            parent/children construction. 
            </summary>
        </member>
        <member name="T:Clide.TreeNodeFactoryAttribute">
            <summary>
            Attribute that designates a given class as a 
            tree node factory for a specific owner and model type.
            </summary>
        </member>
        <member name="M:Clide.TreeNodeFactoryAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.TreeNodeFactoryAttribute"/> class.
            </summary>
            <param name="isFallback">Whether the factory is a fallback one, meaning a non-fallback one should be tried first..</param>
        </member>
        <member name="P:Clide.TreeNodeFactoryAttribute.IsFallback">
            <summary>
            Gets a value indicating whether the factory is meant
            to provide fallback behavior.
            </summary>
        </member>
        <member name="T:Clide.VsHierarchyItem">
            <summary>
            Basic representation of an item in a hierarchy in VS extensibility APIs. 
            Any solution item should be able to smart-cast to this interface using 
            the As&lt;T&gt; method.
            </summary>
        </member>
        <member name="M:Clide.VsHierarchyItem.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.VsHierarchyItem"/> class.
            </summary>
            <param name="hierarchy">The hierarchy.</param>
            <param name="itemId">The item id.</param>
        </member>
        <member name="P:Clide.VsHierarchyItem.VsHierarchy">
            <summary>
            Gets the hierarchy that contains the item.
            </summary>
        </member>
        <member name="P:Clide.VsHierarchyItem.ItemId">
            <summary>
            Gets the item id. Can be the special value <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT"/> 
            if the item is a root hierarchy itself, such as a project.
            </summary>
        </member>
        <member name="T:Clide.IVsSolutionHierarchyNode">
            <summary>
            Low-level primitive that exposes the underlying 
            Visual Studio hierarchy nodes.
            </summary>
        </member>
        <member name="P:Clide.IVsSolutionHierarchyNode.ServiceProvider">
            <summary>
            Gets the service provider.
            </summary>
        </member>
        <member name="P:Clide.IVsSolutionHierarchyNode.VsHierarchy">
            <summary>
            Gets the node hierarchy.
            </summary>
        </member>
        <member name="P:Clide.IVsSolutionHierarchyNode.ExtensibilityObject">
            <summary>
            Gets the extensibility object.
            </summary>
        </member>
        <member name="P:Clide.IVsSolutionHierarchyNode.ItemId">
            <summary>
            Gets the item id.
            </summary>
        </member>
        <member name="P:Clide.IVsSolutionHierarchyNode.DisplayName">
            <summary>
            Gets the display name.
            </summary>
        </member>
        <member name="P:Clide.IVsSolutionHierarchyNode.Parent">
            <summary>
            Gets the parent node.
            </summary>
        </member>
        <member name="P:Clide.IVsSolutionHierarchyNode.Children">
            <summary>
            Gets the child nodes.
            </summary>
        </member>
        <member name="T:Clide.AggregateNodeFactory`1">
            <summary>
            An aggregate factory that delegates the <see cref="M:Clide.AggregateNodeFactory`1.Supports(`0)"/> and 
            <see cref="M:Clide.AggregateNodeFactory`1.CreateNode(System.Lazy{Clide.ITreeNode},`0)"/> implementations to the first factory 
            received in the constructor that supports the given model node.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
        </member>
        <member name="T:Clide.MessageBoxService">
            <summary>
            Default implementation of the <see cref="T:Clide.IMessageBoxService"/>.
            </summary>
        </member>
        <member name="T:Clide.IMessageBoxService">
            <summary>
            Provides a contract to show messages to the user.
            </summary>
        </member>
        <member name="M:Clide.IMessageBoxService.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult)">
            <summary>
            Shows a message to the user.
            </summary>
            <returns><see langword="true"/> if the user clicked on Yes/OK.</returns>
        </member>
        <member name="M:Clide.IMessageBoxService.Prompt(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult)">
            <summary>
            Prompts the user for a response.
            </summary>
        </member>
        <member name="M:Clide.IMessageBoxService.InputBox(System.String,System.String)">
            <summary>
            Gets a string inputs from the user.
            </summary>
        </member>
        <member name="M:Clide.MessageBoxService.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsUIShell,Clide.IUIThread)">
            <summary>
            Default constructor for runtime behavior that can't be mocked.
            </summary>
        </member>
        <member name="T:Clide.IDevEnv">
            <summary>
            Entry point interface for the environment components.
            </summary>
        </member>
        <member name="M:Clide.IDevEnv.Exit(System.Boolean)">
            <summary>
            Exits Visual Studio.
            </summary>
            <param name="saveAll">Whether to save all pending changes before exiting.</param>
        </member>
        <member name="M:Clide.IDevEnv.Restart(System.Boolean)">
            <summary>
            Restarts Visual Studio.
            </summary>
            <param name="saveAll">Whether to save all pending changes before exiting.</param>
            <returns><see langword="true"/> if the operation succeeded; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="P:Clide.IDevEnv.IsInitialized">
            <summary>
            Gets a value indicating whether the shell has been initialized.
            </summary>
        </member>
        <member name="P:Clide.IDevEnv.IsElevated">
            <summary>
            Gets a value indicating whether the environment is running with 
            elevated permissions.
            </summary>
        </member>
        <member name="E:Clide.IDevEnv.Initialized">
            <summary>
            Occurs when the shell has finished initializing.
            </summary>
        </member>
        <member name="P:Clide.IDevEnv.DialogWindowFactory">
            <summary>
            Gets the dialog window factory.
            </summary>
        </member>
        <member name="P:Clide.IDevEnv.Errors">
            <summary>
            Gets the errors manager
            </summary>
        </member>
        <member name="P:Clide.IDevEnv.MessageBoxService">
            <summary>
            Gets the message box service.
            </summary>
        </member>
        <member name="P:Clide.IDevEnv.OutputWindow">
            <summary>
            Gets the output window manager.
            </summary>
        </member>
        <member name="P:Clide.IDevEnv.ServiceLocator">
            <summary>
            Gets the service locator.
            </summary>
        </member>
        <member name="P:Clide.IDevEnv.StatusBar">
            <summary>
            Gets the status bar.
            </summary>
        </member>
        <member name="P:Clide.IDevEnv.ToolWindows">
            <summary>
            Gets the tool windows.
            </summary>
        </member>
        <member name="P:Clide.IDevEnv.UIThread">
            <summary>
            Gets the UI thread.
            </summary>
        </member>
        <member name="P:Clide.IDevEnv.ReferenceService">
            <summary>
            Gets the reference service.
            </summary>
        </member>
        <member name="T:Clide.DialogWindowFactory">
            <summary>
            Implements dialog creation in Visual Studio.
            </summary>
        </member>
        <member name="T:Clide.IDialogWindowFactory">
            <summary>
            Provides dialog windows creation functionality, properly setting the 
            window owner and invoking the creation on the proper UI thread.
            </summary>
        </member>
        <member name="M:Clide.IDialogWindowFactory.CreateDialog``1">
            <summary>
            Creates a <see cref="T:Clide.IDialogWindow"/> dialog as child of the main Visual Studio window.
            </summary>
            <typeparam name="TView">The type of the window to create.</typeparam>
            <returns>
            The created <see cref="T:Clide.IDialogWindow"/> dialog.
            </returns>
        </member>
        <member name="T:Clide.VsUIShellExtensions">
            <summary>
            Defines extension methods related to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIShell"/>.
            </summary>
        </member>
        <member name="M:Clide.VsUIShellExtensions.GetMainWindow(Microsoft.VisualStudio.Shell.Interop.IVsUIShell)">
            <summary>
            Gets the Visual Studio main window.
            </summary>
        </member>
        <member name="M:Clide.VsUIShellExtensions.ShowMessageBox(Microsoft.VisualStudio.Shell.Interop.IVsUIShell,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult)">
            <summary>
            Shows a message to the user.
            </summary>
        </member>
        <member name="M:Clide.VsUIShellExtensions.Prompt(Microsoft.VisualStudio.Shell.Interop.IVsUIShell,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult)">
            <summary>
            Prompts the user for a response.
            </summary>
        </member>
        <member name="T:Clide.IDevEnvExtensions">
            <summary>
            Usability extensions for <see cref="T:Clide.IDevEnv"/>.
            </summary>
        </member>
        <member name="M:Clide.IDevEnvExtensions.ToolWindow``1(Clide.IDevEnv)">
            <summary>
            Gets the tool window of the given type from the environment, if any.
            </summary>
            <returns>The tool window or <see langword="null"/> if it does not exist.</returns>
        </member>
        <member name="M:Clide.IDevEnvExtensions.SolutionExplorer(Clide.IDevEnv)">
            <summary>
            Gets the solution explorer tool window.
            </summary>
        </member>
        <member name="T:Clide.IDialogWindow">
            <summary>
            Represents a dialog window. This interface only needs to be added to the 
            implementing interfaces for any <see cref="T:System.Windows.Window"/> and no additional code is 
            required. All members are already implemented by the base class <see cref="T:System.Windows.Window"/>.
            </summary>
        </member>
        <member name="M:Clide.IDialogWindow.ShowDialog">
            <summary>
            Opens a dialog and returns only when the newly opened dialog is closed.
            </summary>
            <returns>A value that signifies how a dialog was closed by the user (canceled or not).</returns>
        </member>
        <member name="M:Clide.IDialogWindow.Close">
            <summary>
            Closes the dialog.
            </summary>
        </member>
        <member name="P:Clide.IDialogWindow.DataContext">
            <summary>
            Gets or sets the data context, typically a view model.
            </summary>
        </member>
        <member name="P:Clide.IDialogWindow.DialogResult">
            <summary>
            Gets or sets the dialog result.
            </summary>
        </member>
        <member name="T:Clide.ISettingsManager">
            <summary>
            Main interface to deal with settings in the development environment. Provides 
            a friendly interface to read and save properties of an object to the environment 
            settings store.
            </summary>
        </member>
        <member name="M:Clide.ISettingsManager.Read(System.Object)">
            <summary>
            Reads all saved properties of the given object. Default values are populated from 
            <see cref="T:System.ComponentModel.DefaultValueAttribute"/> too.
            </summary>
        </member>
        <member name="M:Clide.ISettingsManager.Save(System.Object,System.Boolean)">
            <summary>
            Saves the specified settings, after validating it using the data annotations attributes.
            </summary>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"> The object is not valid.</exception>
        </member>
        <member name="T:Clide.ISettingsStore">
            <summary>
            Interface that exists to abstract the underlying VS settings store to make the functionality of the settings manager 
            testable.
            </summary>
        </member>
        <member name="T:Clide.IStatusBar">
            <summary>
            Provides membes to interact with the status bar.
            </summary>
        </member>
        <member name="M:Clide.IStatusBar.Clear">
            <summary>
            Clears the message in the status bar.
            </summary>
        </member>
        <member name="M:Clide.IStatusBar.ShowMessage(System.String)">
            <summary>
            Shows the given message in the status bar.
            </summary>
            <param name="message">The message to show.</param>
        </member>
        <member name="M:Clide.IStatusBar.ShowProgress(System.String,System.Int32,System.Int32)">
            <summary>
            Shows the given progress message and value.
            </summary>
            <param name="message">The message to show.</param>
            <param name="complete">The completed value so far.</param>
            <param name="total">The total value to be completed.</param>
        </member>
        <member name="T:Clide.IToolWindow">
            <summary>
            Common interface for tool windows.
            </summary>
        </member>
        <member name="M:Clide.IToolWindow.Show">
            <summary>
            Makes the tool window visible if it was closed or hidden.
            </summary>
        </member>
        <member name="M:Clide.IToolWindow.Close">
            <summary>
            Closes the tool window.
            </summary>
        </member>
        <member name="P:Clide.IToolWindow.IsVisible">
            <summary>
            Whether the tool window is currently visible.
            </summary>
        </member>
        <member name="T:Clide.IUIThread">
            <summary>
            Allows marshaling calls to the developer environment main UI thread.
            </summary>
            <remarks>
            If the calling code is already running on the UI thread, the delegates
            are invoked immediately without marshaling.
            </remarks>
        </member>
        <member name="M:Clide.IUIThread.BeginInvoke(System.Action)">
            <summary>
            Begins invoking the specified action in the UI thread.
            </summary>
        </member>
        <member name="M:Clide.IUIThread.Invoke(System.Action)">
            <summary>
            Invokes the specified action in the UI thread.
            </summary>
        </member>
        <member name="M:Clide.IUIThread.Invoke``1(System.Func{``0})">
            <summary>
            Invokes the specified function in the UI thread.
            </summary>
        </member>
        <member name="T:AppDomainData">
            <summary>
            Provides strong-typed access to AppDomain storage data.
            </summary>
            <nuget id="netfx-System.AppDomainData" />
        </member>
        <member name="M:AppDomainData.SetData``1(``0)">
            <summary>
            Sets the given data in the <see cref="T:System.AppDomain"/> storage. The returned 
            <see cref="T:System.IDisposable"/> can be used to remove the state 
            when disposed.
            </summary>
        </member>
        <member name="M:AppDomainData.GetData``1">
            <summary>
            Gets the data from the <see cref="T:System.AppDomain"/> storage.
            </summary>
        </member>
        <member name="M:AppDomainData.SetData``1(System.AppDomain,``0)">
            <summary>
            Sets the given data in the <see cref="T:System.AppDomain"/> storage. The returned 
            <see cref="T:System.IDisposable"/> can be used to remove the state 
            when disposed.
            </summary>
            <param name="domain" this="true">The domain to set the data on.</param>
            <param name="data">The data to save.</param>
        </member>
        <member name="M:AppDomainData.GetData``1(System.AppDomain)">
            <summary>
            Gets the data from the <see cref="T:System.AppDomain"/> storage.
            </summary>
            <param name="domain" this="true">The domain to get the data.</param>
        </member>
        <member name="T:DictionaryGetOrAdd">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist. 
            </summary>
        </member>
        <member name="M:DictionaryGetOrAdd.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist. 
            No locking occurs, so the value may be calculated twice on concurrent scenarios. If you need 
            concurrency assurances, use a concurrent dictionary instead.
            </summary>
            <nuget id="netfx-System.Collections.Generic.DictionaryGetOrAdd"/>
            <param name="dictionary" this="true">The dictionary where the key/value pair will be added</param>
            <param name="key">The key to be added to the dictionary</param>
            <param name="valueFactory">The value factory</param>
        </member>
        <member name="T:ComponentModelAttributes">
            <summary>
            Provides strong typed access to ComponentModel attributes by using the ComponentModel() extension method over a type, method, property, etc.
            </summary>
            <nuget id="netfx-System.ComponentModel.Attributes" />
        </member>
        <member name="M:ComponentModelAttributes.ComponentModel(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Provides strong typed access to System.ComponentModel attributes for a type, method, property, etc.
            </summary>
            <param name="reflectionObject" this="true">The object this extension method applies to.</param>
            <param name="inherit">Whether to retrieve attributes from base types.</param>
        </member>
        <member name="T:IComponentModelAttributes">
            <summary>
            Provides strong typed access to ComponentModel attributes.
            </summary>
            <nuget id="netfx-System.ComponentModel.Attributes" />
        </member>
        <member name="P:IComponentModelAttributes.AmbientValue">
            <summary>
            Gets the value of <see cref="P:System.ComponentModel.AmbientValueAttribute.Value"/> if present.
            </summary>
        </member>
        <member name="P:IComponentModelAttributes.AttributeProvider">
            <summary>
            Gets the <see cref="T:System.ComponentModel.AttributeProviderAttribute"/> if present.
            </summary>
        </member>
        <member name="P:IComponentModelAttributes.Bindable">
            <summary>
            Gets the value of <see cref="P:System.ComponentModel.BindableAttribute.Bindable"/> if present.
            </summary>
        </member>
        <member name="P:IComponentModelAttributes.BindingDirection">
            <summary>
            Gets the value of <see cref="P:System.ComponentModel.BindableAttribute.Direction"/> if present.
            </summary>
        </member>
        <member name="P:IComponentModelAttributes.Browsable">
            <summary>
            Gets the value of <see cref="P:System.ComponentModel.BrowsableAttribute.Browsable"/> if present.
            </summary>
        </member>
        <member name="P:IComponentModelAttributes.Category">
            <summary>
            Gets the value of <see cref="P:System.ComponentModel.CategoryAttribute.Category"/> if present.
            </summary>
        </member>
        <member name="P:IComponentModelAttributes.ComplexBindingDataMember">
            <summary>
            Gets the value of <see cref="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataMember"/> if present.
            </summary>
        </member>
        <member name="P:IComponentModelAttributes.ComplexBindingDataSource">
            <summary>
            Gets the value of <see cref="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataSource"/> if present.
            </summary>
        </member>
        <member name="P:IComponentModelAttributes.DefaultValue">
            <summary>
            Gets the value of <see cref="P:System.ComponentModel.DefaultValueAttribute.Value"/> if present.
            </summary>
        </member>
        <member name="P:IComponentModelAttributes.Description">
            <summary>
            Gets the value of <see cref="P:System.ComponentModel.DescriptionAttribute.Description"/> if present.
            </summary>
        </member>
        <member name="P:IComponentModelAttributes.DisplayName">
            <summary>
            Gets the value of <see cref="P:System.ComponentModel.DisplayNameAttribute.DisplayName"/> if present.
            </summary>
        </member>
        <member name="P:IComponentModelAttributes.EditorBrowsable">
            <summary>
            Gets the value of <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State"/> if present.
            </summary>
        </member>
        <member name="P:IComponentModelAttributes.IsDesignOnly">
            <summary>
            Gets the value of <see cref="P:System.ComponentModel.DesignOnlyAttribute.IsDesignOnly"/> if present.
            </summary>
        </member>
        <member name="P:IComponentModelAttributes.IsImmutable">
            <summary>
            Gets the value of <see cref="P:System.ComponentModel.ImmutableObjectAttribute.Immutable"/> if present.
            </summary>
        </member>
        <member name="P:IComponentModelAttributes.IsLocalizable">
            <summary>
            Gets the value of <see cref="P:System.ComponentModel.LocalizableAttribute.IsLocalizable"/> if present.
            </summary>
        </member>
        <member name="P:IComponentModelAttributes.IsReadOnly">
            <summary>
            Gets the value of <see cref="P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly"/> if present.
            </summary>
        </member>
        <member name="P:IComponentModelAttributes.SettingsBindable">
            <summary>
            Gets the value of <see cref="P:System.ComponentModel.SettingsBindableAttribute.Bindable"/> if present.
            </summary>
        </member>
        <member name="T:System.Dynamic.DynamicReflection">
            <summary>
            Provides reflection-based dynamic syntax for objects and types. 
            This class provides the extension methods <see cref="M:System.Dynamic.DynamicReflection.AsDynamicReflection(System.Object)"/> 
            and <see cref="M:System.Dynamic.DynamicReflection.AsDynamicReflection(System.Type)"/> as entry points.
            </summary>
            <nuget id="netfx-System.Dynamic.Reflection"/>
        </member>
        <member name="M:System.Dynamic.DynamicReflection.AsDynamicReflection(System.Object)">
            <summary>
            Provides dynamic syntax for accessing the given object members.
            </summary>
            <nuget id="netfx-System.Dynamic.Reflection" />
            <param name="obj" this="true">The object to access dinamically</param>
        </member>
        <member name="M:System.Dynamic.DynamicReflection.AsDynamicReflection(System.Type)">
            <summary>
            Provides dynamic syntax for accessing the given type members.
            </summary>
            <nuget id="netfx-System.Dynamic.Reflection" />
            <param name="type" this="true">The type to access dinamically</param>
        </member>
        <member name="M:System.Dynamic.DynamicReflection.AsGenericTypeParameter(System.Type)">
            <summary>
            Converts the type to a <see cref="T:System.Dynamic.TypeParameter"/> that 
            the reflection dynamic must use to make a generic 
            method invocation.
            </summary>
            <nuget id="netfx-System.Dynamic.Reflection"/>
            <param name="type" this="true">The type to convert</param>
        </member>
        <member name="M:System.Dynamic.DynamicReflection.DynamicReflectionObject.UnboxDynamic(System.Object)">
            <summary>
            Converts dynamic objects to object, which may cause unboxing 
            of the wrapped dynamic such as in our own DynamicReflectionObject type.
            </summary>
        </member>
        <member name="M:System.Dynamic.DynamicReflection.DynamicReflectionObject.FindBestMatchImpl(System.Dynamic.DynamicMetaObjectBinder,System.Object[],System.Int32,System.Collections.Generic.IEnumerable{System.Dynamic.DynamicReflection.DynamicReflectionObject.IInvocable},System.Boolean)">
            <summary>
            Finds the best match among the candidates.
            </summary>
            <param name="binder">The binder that is requesting the match.</param>
            <param name="args">The args passed in to the invocation.</param>
            <param name="genericArgs">The generic args if any.</param>
            <param name="candidates">The candidate methods to use for the match..</param>
            <param name="assignableFrom">if set to <c>true</c>, uses a more lax matching approach for arguments, with IsAssignableFrom instead of == for arg type.</param>
        </member>
        <member name="T:System.Dynamic.OutValue">
            <summary>
            Allows output parameters to be passed to reflection dynamic.
            This support does not exist in C# 4.0 dynamic out of the box.
            </summary>
        </member>
        <member name="M:System.Dynamic.OutValue.Create``1(System.Action{``0})">
            <summary>
            Creates a value setter delegating reference
            to be used as an output parameter when invoking the 
            dynamic object.
            </summary>
            <param name="setter">The value to pass as out to the dynamic invocation.</param>
        </member>
        <member name="P:System.Dynamic.OutValue.Value">
            <summary>
            Sets the value.
            </summary>
        </member>
        <member name="T:System.Dynamic.OutValue`1">
            <summary>
            Allows output parameters to be passed to reflection dynamic.
            This support does not exist in C# 4.0 dynamic out of the box.
            </summary>
        </member>
        <member name="M:System.Dynamic.OutValue`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Dynamic.OutValue`1"/> class.
            </summary>
        </member>
        <member name="P:System.Dynamic.OutValue`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:System.Dynamic.RefValue">
            <summary>
            Allows by-ref values to be passed to reflection dynamic.
            This support does not exist in C# 4.0 dynamic out of the box.
            </summary>
        </member>
        <member name="M:System.Dynamic.RefValue.Create``1(System.Func{``0},System.Action{``0})">
            <summary>
            Creates a value getter/setter delegating reference
            to be used by reference when invoking the 
            dynamic object.
            </summary>
            <param name="getter">The getter of the by-ref value to the dynamic invocation.</param>
            <param name="setter">The setter of the by-ref value to the dynamic invocation.</param>
        </member>
        <member name="P:System.Dynamic.RefValue.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:System.Dynamic.RefValue`1">
            <summary>
            Allows by-ref values to be passed to reflection dynamic.
            This support does not exist in C# 4.0 dynamic out of the box.
            </summary>
        </member>
        <member name="M:System.Dynamic.RefValue`1.#ctor(System.Func{`0},System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Dynamic.RefValue`1"/> class.
            </summary>
        </member>
        <member name="P:System.Dynamic.RefValue`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:System.Dynamic.TypeParameter">
            <summary>
            Represents a runtime type parameter to use to 
            make a generic method invocation.
            </summary>
        </member>
        <member name="M:System.Dynamic.TypeParameter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Dynamic.TypeParameter"/> class.
            </summary>
        </member>
        <member name="P:System.Dynamic.TypeParameter.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="T:System.Reflection.GetCustomAttributeExtension">
            <summary>
            Allows retrieving custom attributes from assemblies, types, methods, properties, etc. using a generic method.
            </summary>
            <nuget id="netfx-System.Reflection.GetCustomAttribute" />
        </member>
        <member name="M:System.Reflection.GetCustomAttributeExtension.GetCustomAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Retrieves the first defined attribute of the given type from the provider if any.
            </summary>
            <typeparam name="TAttribute">Type of the attribute, which must inherit from <see cref="T:System.Attribute"/>.</typeparam>
            <param name="provider" this="true">Any type implementing the interface, which can be an assembly, type, 
            property, method, etc.</param>
            <param name="inherit">Optionally, whether the attribute will be looked in base classes.</param>
            <returns>The attribute instance if defined; <see langword="null"/> otherwise.</returns>
        </member>
        <member name="M:System.Reflection.GetCustomAttributeExtension.GetCustomAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Retrieves the first defined attribute of the given type from the provider if any.
            </summary>
            <typeparam name="TAttribute">Type of the attribute, which must inherit from <see cref="T:System.Attribute"/>.</typeparam>
            <param name="provider" this="true">Any type implementing the interface, which can be an assembly, type, 
            property, method, etc.</param>
            <param name="inherit">Optionally, whether the attribute will be looked in base classes.</param>
            <returns>The attribute instance if defined; <see langword="null"/> otherwise.</returns>
        </member>
        <member name="T:Reflect">
            <summary>
            Provides strong-typed static reflection for arbitrary 
            expressions, typically static members where no 
            instance parameter is needed.
            </summary>
        </member>
        <member name="M:Reflect.GetMethod(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <param name="method">An expression that invokes a method.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
            <returns>The method info.</returns>
        </member>
        <member name="M:Reflect.GetMethod``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <param name="method">An expression that invokes a method.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
            <returns>The method info.</returns>
        </member>
        <member name="M:Reflect.GetMethod(System.Linq.Expressions.Expression{System.Func{System.Action}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <param name="method">An expression that invokes a method.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
            <returns>The method info.</returns>
        </member>
        <member name="M:Reflect.GetMethod``1(System.Linq.Expressions.Expression{System.Func{System.Func{``0}}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <param name="method">An expression that invokes a method.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
            <returns>The method info.</returns>
        </member>
        <member name="M:Reflect.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the name of the property represented by the lambda expression.
            </summary>
            <param name="property">An expression that accesses a property.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="property"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="property"/> is not a lambda expression or it does not represent a property access.</exception>
            <returns>The property info.</returns>
        </member>
        <member name="M:Reflect.GetProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the property represented by the lambda expression.
            </summary>
            <param name="property">An expression that accesses a property.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="property"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="property"/> is not a lambda expression or it does not represent a property access.</exception>
            <returns>The property info.</returns>
        </member>
        <member name="M:Reflect.GetField``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the field represented by the lambda expression.
            </summary>
            <param name="field">An expression that accesses a field.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="field"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="field"/> is not a lambda expression or it does not represent a field access.</exception>
            <returns>The field info.</returns>
        </member>
        <member name="T:Reflect`1">
            <summary>
            Provides strong-typed static reflection of the <typeparamref name="TTarget"/> 
            type.
            </summary>
            <typeparam name="TTarget">Type to reflect.</typeparam>
        </member>
        <member name="M:Reflect`1.GetMethod(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <param name="method">An expression that invokes a method.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
            <returns>The method info.</returns>
        </member>
        <member name="M:Reflect`1.GetMethod``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <param name="method">An expression that invokes a method.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
            <returns>The method info.</returns>
        </member>
        <member name="M:Reflect`1.GetMethod``1(System.Linq.Expressions.Expression{System.Func{`0,System.Func{``0}}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <param name="method">An expression that invokes a method.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
            <returns>The method info.</returns>
        </member>
        <member name="M:Reflect`1.GetMethod(System.Linq.Expressions.Expression{System.Func{`0,System.Action}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <param name="method">An expression that invokes a method.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
            <returns>The method info.</returns>
        </member>
        <member name="M:Reflect`1.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets the name of the property represented by the lambda expression.
            </summary>
            <param name="property">An expression that accesses a property.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="property"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="property"/> is not a lambda expression or it does not represent a property access.</exception>
            <returns>The property info.</returns>
        </member>
        <member name="M:Reflect`1.GetProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets the property represented by the lambda expression.
            </summary>
            <param name="property">An expression that accesses a property.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="property"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="property"/> is not a lambda expression or it does not represent a property access.</exception>
            <returns>The property info.</returns>
        </member>
        <member name="M:Reflect`1.GetField``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets the field represented by the lambda expression.
            </summary>
            <param name="field">An expression that accesses a field.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="field"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="field"/> is not a lambda expression or it does not represent a field access.</exception>
            <returns>The field info.</returns>
        </member>
        <member name="T:Clide.OwningPackageAttribute">
            <summary>
            Used to specify the package that owns a given component, such as a <see cref="T:Clide.OptionsPage`2"/> 
            derived class.
            </summary>
        </member>
        <member name="M:Clide.OwningPackageAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.OwningPackageAttribute"/> class.
            </summary>
        </member>
        <member name="P:Clide.OwningPackageAttribute.PackageId">
            <summary>
            Gets the package GUID.
            </summary>
        </member>
        <member name="T:Clide.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.CommandManager_CommandAttributeMissing">
            <summary>
              Looks up a localized string similar to In order to register command instance &apos;{command}&apos;, it must have a [Command] attribute..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.CommandManager_CommandFilterAttributeMissing">
            <summary>
              Looks up a localized string similar to In order to register command filter instance &apos;{filter}&apos;, it must have a [CommandFilter] attribute..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.CommandManager_CommandInterceptorAttributeMissing">
            <summary>
              Looks up a localized string similar to In order to register command interceptor instance &apos;{interceptor}&apos;, it must have a [CommandInterceptor] attribute..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.CommandManager_CommandNotFound">
            <summary>
              Looks up a localized string similar to Package &apos;{packageId}&apos; does not provide a command with group identifier &apos;{groupId}&apos; and command identifier &apos;{commandId}&apos;..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.CommandManager_CommandNotOle">
            <summary>
              Looks up a localized string similar to Command to filter does not provide the required BeforeQueryStatus event (typically inherited from OleMenuCommand). Filtering cannot be performed. (Package Id: &apos;{packageId}&apos;, Group Id: &apos;{groupId}&apos;, Command Id &apos;{commandId}&apos;).
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.CommandManager_CommandPackageNotServiceProvider">
            <summary>
              Looks up a localized string similar to Loaded package with identifier &apos;{packageId}&apos; that owns the command to filter is not a service provider..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.CommandManager_CommandRegistered">
            <summary>
              Looks up a localized string similar to Registered command {commandText} ({commandType}). .
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.CommandManager_DuplicateCommand">
            <summary>
              Looks up a localized string similar to Command with id &apos;{id}&apos; and group &apos;{group}&apos; has already been registered with the menu command service..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.CommandManager_FilterFailed">
            <summary>
              Looks up a localized string similar to Command filter {filter} caused an unexpected exception: {exception}..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.CommandManager_InterceptorFailed">
            <summary>
              Looks up a localized string similar to Command interceptor {interceptor} caused an unexpected exception: {exception}..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.CommandManager_NoMenuCommandService">
            <summary>
              Looks up a localized string similar to Could not retrieve the menu command service from the package with identifier &apos;{packageId}&apos; that owns the command to filter..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.CommandManager_OwningPackageAttributeRequired">
            <summary>
              Looks up a localized string similar to Command type &apos;{type}&apos; does not have the required attribute &apos;{attribute}&apos;..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.CommandManager_OwningPackageNotFound">
            <summary>
              Looks up a localized string similar to Command type &apos;{type}&apos; specifies owning package with id &apos;{packageId}&apos; but it could not be found or loaded..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.CommandManager_OwningPackageNotServiceProvider">
            <summary>
              Looks up a localized string similar to Command type &apos;{type}&apos; specifies owning package with id &apos;{packageId}&apos; which is not a valid service provider..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.CommandManager_PackageGuidMissing">
            <summary>
              Looks up a localized string similar to In order to register all commands for a given package automatically, the owning package &apos;{package}&apos; must have a [Guid] attribute applied, which must match the commands&apos; corresponding [Command] attribute..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.ComponentModelExtensions_ExportProviderIsNotCompositionService">
            <summary>
              Looks up a localized string similar to The given export provider &apos;{provider}&apos; does not implement the required ICompositionService interface..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.CompositionSource_ImportManyRequired">
            <summary>
              Looks up a localized string similar to In order to retrieve the multiple components of type {componentType} from Visual Studio composition, the [ImportMany] annotation has to be used..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.ConfigProjectProperties_UnsupportedProject">
            <summary>
              Looks up a localized string similar to Project &apos;{projectFile}&apos; must be based on MSBuild in order to support dynamic properties..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.DevEnvFactory_ClideCantBeMefComponent">
            <summary>
              Looks up a localized string similar to {clideAssembly} cannot be exported as a MEF component in the hosting extension manifest..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.DevEnvFactory_ClideComponentAlsoMefComponent">
            <summary>
              Looks up a localized string similar to The following assemblies are specified as both Clide components and MEF components in the package manifest &apos;{packageManifest}&apos;: {assemblies}. This is typically an error and could result in duplicate exports to the global composition container in Visual Studio. If you want to export some components only as MEF components or Clide components, place them in separate assemblies and configure them separately in the manifest..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.DevEnvFactory_ClideComponentDeclared">
            <summary>
              Looks up a localized string similar to Found Clide component &apos;{component}&apos; to register for composition at &apos;{componentAssembly}&apos;..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.DevEnvFactory_ClideComponentNotFound">
            <summary>
              Looks up a localized string similar to The extension manifest file &apos;{packageManifest}&apos; specified a Clide component &apos;{clideComponent}&apos; that was not found at &apos;{assemblyFile}&apos;..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.DevEnvFactory_ClideNotNecessaryAsComponent">
            <summary>
              Looks up a localized string similar to The Clide main assembly does not need to be added as Clide component in the extension manifest file &apos;{packageManifest}&apos;..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.DevEnvFactory_CompositionErrors">
            <summary>
              Looks up a localized string similar to Composition errors prevented the successfull creation of the development environment API. All {primaryRejectionCount} primary rejection errors will be logged..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.DevEnvFactory_CreatingComposition">
            <summary>
              Looks up a localized string similar to Initializing development environment composition..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.DevEnvFactory_DetectedInstallPath">
            <summary>
              Looks up a localized string similar to Detected hosting package installation path at &apos;{installPath}&apos;..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.DevEnvFactory_ExtensionManifestFound">
            <summary>
              Looks up a localized string similar to Extension manifest for hosting package found at &apos;{manifestFile}&apos;..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.DevEnvFactory_ExtensionManifestNotFound">
            <summary>
              Looks up a localized string similar to Extension manifest for hosting package not found at expected location &apos;{manifestFile}&apos;..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.Diagnostics_FailedToCreateOutputWindow">
            <summary>
              Looks up a localized string similar to Failed to create output window for diagnostics traces..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.General_MissingGuidAttribute">
            <summary>
              Looks up a localized string similar to Hosting package &apos;{packageType}&apos; does not have the required [Guid] attribute..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.Host_FailedToInitialize">
            <summary>
              Looks up a localized string similar to Failed to initialize host..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.Hosting_UnsupportedRuntime">
            <summary>
              Looks up a localized string similar to Unsupported Visual Studio version. Please update Clide..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.IProjectNodeExtensions_BuildException">
            <summary>
              Looks up a localized string similar to Failed to invoke build..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.IProjectNodeExtensions_BuildNoSolution">
            <summary>
              Looks up a localized string similar to The specified project &apos;{project}&apos; does not have a valid owning solution..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.IProjectNodeExtensions_FailedToLoadAssembly">
            <summary>
              Looks up a localized string similar to Failed to load assemly reference &apos;{reference}&apos; from path &apos;{path}&apos;..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.IProjectNodeExtensions_InvalidTypeContext">
            <summary>
              Looks up a localized string similar to Could not retrieve the required type discovery services from the project..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.IProjectNodeExtensions_InvalidVsContext">
            <summary>
              Looks up a localized string similar to Cannot retrieve project types. Project is not a valid Visual Studio project, or the service provider cannot be retrieved from it..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.IProjectNodeExtensions_NoBuildOutput">
            <summary>
              Looks up a localized string similar to Building project &apos;{projectName}&apos; did not generate the expected output assembly &apos;{assemblyFile}&apos;..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.IProjectNodeExtensions_NoTargetAssemblyName">
            <summary>
              Looks up a localized string similar to Could not determine the target assembly name for project &apos;{projectName}&apos;. The project TargetFileName and/or TargetDir properties are empty..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.IServiceProviderExtensions_MissingGuidAttribute">
            <summary>
              Looks up a localized string similar to Specified package type &apos;{packageType}&apos; does not have the required [Guid] attribute..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.ISolutionNodeExtensions_BuildException">
            <summary>
              Looks up a localized string similar to Failed to invoke build..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.ISolutionNodeExtensions_BuildNotSupported">
            <summary>
              Looks up a localized string similar to The specified solution does not support builds..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.OptionsManager_FailedToRegisterPage">
            <summary>
              Looks up a localized string similar to Failed to register page &apos;{pageType}&apos;..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.OptionsManager_ManagedPackageRequired">
            <summary>
              Looks up a localized string similar to The owning package of a page must be a managed package, inheriting from &apos;{managedPackageBaseType}&apos;..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.OptionsManager_OwningPackageNotFound">
            <summary>
              Looks up a localized string similar to Options page specified package owner with Guid &apos;{owningPackageGuid}&apos;, but the package could not be found or loaded..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.OptionsManager_OwningPackageRequired">
            <summary>
              Looks up a localized string similar to Options page of type &apos;{pageType}&apos; does not provide the required &apos;{owningPackageAttributeType}&apos; attribute..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.OptionsManager_PageCategoryRequired">
            <summary>
              Looks up a localized string similar to Options page &apos;{pageType}&apos; must have a Category attribute that specifies the name of the root category node this page shows under in the Tools | Options dialog..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.OptionsManager_PageDisplayNameRequired">
            <summary>
              Looks up a localized string similar to Options page &apos;{pageType}&apos; must have a DisplayName attribute that determines the name of the node under the specified category in the Tools | Options dialog tree..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.OptionsManager_ShellReferenceNotFound">
            <summary>
              Looks up a localized string similar to Could not find reference to Microsoft.VisualStudio.Shell (either 10.0 or 11.0) on the given package type {packageType}..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.OptionsManager_Unsupported">
            <summary>
              Looks up a localized string similar to Tools options pages are not supported in this version of Visual Studio..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.OutputWindowManager_CreatingPane">
            <summary>
              Looks up a localized string similar to Creating output pane &apos;{title}&apos; since it doesn&apos;t exist already..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.OutputWindowManager_FailedToCreatePane">
            <summary>
              Looks up a localized string similar to Failed to create output window pane &apos;{title}&apos;..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.OutputWindowManager_RetrievingPane">
            <summary>
              Looks up a localized string similar to Retrieving potentially existing output pane &apos;{title}&apos;..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.OutputWindowManager_TraceInitializing">
            <summary>
              Looks up a localized string similar to Initializing trace output pane &apos;{title}&apos;..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.Settings_AlreadyInitialized">
            <summary>
              Looks up a localized string similar to Object has already been initialized..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.Settings_EndEditWithoutBeginEdit">
            <summary>
              Looks up a localized string similar to EndEdit invoked without corresponding BeginEdit..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.Settings_EndInitWithoutBeginInit">
            <summary>
              Looks up a localized string similar to EndInit invoked without corresponding BeginInit..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.Settings_FailedToRestore">
            <summary>
              Looks up a localized string similar to Failed to restore original state when editing was cancelled..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.Settings_TraceSaved">
            <summary>
              Looks up a localized string similar to Settings successfully saved..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.SettingsManager_CannotSaveAsString">
            <summary>
              Looks up a localized string similar to Cannot persist setting value of type &apos;{valueType}&apos; from property &apos;{owningType}.{propertyName}&apos;. An appropriate type converter that can convert the value to a string is required..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.SettingsManager_FailedToRead">
            <summary>
              Looks up a localized string similar to Failed to read settings class &apos;{settingsType}&apos; from the settings store..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.SettingsManager_InvalidValue">
            <summary>
              Looks up a localized string similar to Cannot assign value of type &apos;{valueType}&apos; to property &apos;{owningType}.{propertyName}&apos; of type &apos;{propertyType}&apos;. An appropriate type converter is required..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.SolutionNode_InvalidSolutionFile">
            <summary>
              Looks up a localized string similar to The solution file is invalid..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.SolutionTreeNode_SelectionUnsupported">
            <summary>
              Looks up a localized string similar to Selecting element &apos;{itemPath}&apos; is not supported by the underlying project type..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.Trace_OutputPaneId">
            <summary>
              Looks up a localized string similar to 66893206-0EF5-4A16-AA10-6EC6B6319F92.
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.Trace_OutputPaneTitle">
            <summary>
              Looks up a localized string similar to Clide.
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.Trace_RootSource">
            <summary>
              Looks up a localized string similar to Clide.
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.VsCommandExtensionAdapter_CannotExecute">
            <summary>
              Looks up a localized string similar to Attempted to execute command &apos;{commandText}&apos; ({commandType}) but current command status does not allow it..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.VsCommandExtensionAdapter_ExecuteShieldMessage">
            <summary>
              Looks up a localized string similar to Command did not execute successfully due to an unexpected exception. Please check the output window for additional information..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.VsCommandExtensionAdapter_ExecutingCommand">
            <summary>
              Looks up a localized string similar to Executing command &apos;{commandText}&apos; ({commandType})..
            </summary>
        </member>
        <member name="P:Clide.Properties.Resources.VsCommandExtensionAdapter_QueryStatusShieldMessage">
            <summary>
              Looks up a localized string similar to Command could not determine its current status due to an unexpected exception. Please check the output window for additional information..
            </summary>
        </member>
        <member name="T:Clide.SettingsAttribute">
            <summary>
            Attribute to apply to classes that implement the <see cref="T:Clide.ISettings"/> interface.
            </summary>
        </member>
        <member name="M:Clide.SettingsAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.SettingsAttribute"/> class, 
            which are singletons by default.
            </summary>
        </member>
        <member name="T:Clide.SettingsManager">
            <summary>
            Default implementation of <see cref="T:Clide.ISettingsManager"/> which uses <see cref="T:Microsoft.VisualStudio.Shell.Settings.ShellSettingsManager"/>.
            </summary>
        </member>
        <member name="M:Clide.SettingsManager.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.SettingsManager"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="T:Clide.Solution.IFolderNode">
            <summary>
            Represents a folder inside a project or another folder.
            </summary>
        </member>
        <member name="M:Clide.Solution.IFolderNode.CreateFolder(System.String)">
            <summary>
            Creates a nested folder.
            </summary>
        </member>
        <member name="P:Clide.Solution.IFolderNode.OwningProject">
            <summary>
            Gets the owning project.
            </summary>
        </member>
        <member name="T:Clide.Solution.IItemNode">
            <summary>
            Represents an item inside a project or a project folder.
            </summary>
        </member>
        <member name="P:Clide.Solution.IItemNode.OwningProject">
            <summary>
            Gets the owning project.
            </summary>
        </member>
        <member name="P:Clide.Solution.IItemNode.PhysicalPath">
            <summary>
            Gets the physical path of the item.
            </summary>
        </member>
        <member name="P:Clide.Solution.IItemNode.Properties">
            <summary>
            Gets the dynamic properties of the item.
            </summary>
        </member>
        <member name="T:Clide.Solution.IProjectNode">
            <summary>
            Represents a project in the solution explorer tree.
            </summary>
        </member>
        <member name="M:Clide.Solution.IProjectNode.CreateFolder(System.String)">
            <summary>
            Creates a folder inside the project.
            </summary>
        </member>
        <member name="M:Clide.Solution.IProjectNode.Save">
            <summary>
            Saves pending changes to the project file.
            </summary>
        </member>
        <member name="M:Clide.Solution.IProjectNode.PropertiesFor(System.String)">
            <summary>
            Gets the configuration-specific properties for the project.
            </summary>
            <param name="configurationName">Configuration names are the combination 
            of a project configuration and the platform, like "Debug|AnyCPU".</param>
        </member>
        <member name="P:Clide.Solution.IProjectNode.Configuration">
            <summary>
            Gets the project configuration information.
            </summary>
        </member>
        <member name="P:Clide.Solution.IProjectNode.PhysicalPath">
            <summary>
            Gets the physical path of the project.
            </summary>
        </member>
        <member name="P:Clide.Solution.IProjectNode.Properties">
            <summary>
            Gets the global properties of the project.
            </summary>
        </member>
        <member name="T:Clide.Solution.IReferenceNode">
            <summary>
            Interface implemented by a reference in a project.
            </summary>
        </member>
        <member name="P:Clide.Solution.IReferenceNode.OwningProject">
            <summary>
            Gets the owning project.
            </summary>
        </member>
        <member name="T:Clide.Solution.IReferencesNode">
            <summary>
            Interface implemented by the references node in a project.
            </summary>
        </member>
        <member name="P:Clide.Solution.IReferencesNode.OwningProject">
            <summary>
            Gets the owning project.
            </summary>
        </member>
        <member name="T:Clide.Solution.ISolutionExplorer">
            <summary>
            Exposes the solution explorer toolwindow.
            </summary>
        </member>
        <member name="P:Clide.Solution.ISolutionExplorer.Solution">
            <summary>
            Gets the current solution, which might be an 
            empty one if no solution is open.
            </summary>
        </member>
        <member name="P:Clide.Solution.ISolutionExplorer.SelectedNodes">
            <summary>
            Gets the currently selected nodes in the solution explorer tree, 
            which is retrieved from the <see cref="P:Clide.Solution.ISolutionExplorer.Solution"/> property 
            <see cref="P:Clide.Solution.ISolutionNode.SelectedNodes"/>.
            </summary>
        </member>
        <member name="T:Clide.Solution.ISolutionFolderNode">
            <summary>
            Interface implemented by solution folder nodes.
            </summary>
        </member>
        <member name="M:Clide.Solution.ISolutionFolderNode.CreateSolutionFolder(System.String)">
            <summary>
            Creates a nested solution folder.
            </summary>
        </member>
        <member name="T:Clide.Solution.ISolutionNode">
            <summary>
            Represents the solution root node in the solution explorer tree.
            </summary>
        </member>
        <member name="M:Clide.Solution.ISolutionNode.Close(System.Boolean)">
            <summary>
            Closes the solution.
            </summary>
            <param name="saveFirst">If set to <c>true</c> saves the solution before closing.</param>
        </member>
        <member name="M:Clide.Solution.ISolutionNode.Create(System.String)">
            <summary>
            Creates a new blank solution with the specified solution file location.
            </summary>
        </member>
        <member name="M:Clide.Solution.ISolutionNode.Open(System.String)">
            <summary>
            Opens the specified solution file.
            </summary>
        </member>
        <member name="M:Clide.Solution.ISolutionNode.Save">
            <summary>
            Saves the current solution.
            </summary>
        </member>
        <member name="M:Clide.Solution.ISolutionNode.SaveAs(System.String)">
            <summary>
            Saves the current solution to the specified target file.
            </summary>
        </member>
        <member name="M:Clide.Solution.ISolutionNode.CreateSolutionFolder(System.String)">
            <summary>
            Creates a solution folder under the solution root.
            </summary>
        </member>
        <member name="P:Clide.Solution.ISolutionNode.IsOpen">
            <summary>
            Gets a value indicating whether a solution is open.
            </summary>
        </member>
        <member name="P:Clide.Solution.ISolutionNode.ActiveProject">
            <summary>
            Gets the currently active project (if single), which can be the selected project, or 
            the project owning the currently selected item or opened designer file.
            </summary>
            <remarks>
            If there are multiple active projects, this property will be null. This can happen 
            when multiple selection is enabled for items across more than one project
            </remarks>
        </member>
        <member name="P:Clide.Solution.ISolutionNode.SelectedNodes">
            <summary>
            Gets the currently selected nodes in the solution.
            </summary>
        </member>
        <member name="T:Clide.Solution.VsSolutionHierarchyNode">
            <summary>
            A general-purpose <see cref="T:Clide.IVsSolutionHierarchyNode"/> that relies on 
            <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"/> for its behavior and can be reused for most 
            project types.
            </summary>
        </member>
        <member name="M:Clide.Solution.VsSolutionHierarchyNodeIterator.Enumerate(Clide.Solution.VsSolutionHierarchyNode,System.Boolean)">
            <summary>
            Performs the actual enumeration and factory invocation.
            </summary>
        </member>
        <member name="T:Clide.Solution.SolutionNodeKind">
            <summary>
            The kind of solution node.
            </summary>
        </member>
        <member name="F:Clide.Solution.SolutionNodeKind.Solution">
            <summary>
            The node is the solution node.
            </summary>
        </member>
        <member name="F:Clide.Solution.SolutionNodeKind.SolutionFolder">
            <summary>
            The node is a solution folder.
            </summary>
        </member>
        <member name="F:Clide.Solution.SolutionNodeKind.SolutionItem">
            <summary>
            The node is a solution item, meaning it 
            exists in a solution folder, not  a project.
            </summary>
        </member>
        <member name="F:Clide.Solution.SolutionNodeKind.Project">
            <summary>
            The node is a project.
            </summary>
        </member>
        <member name="F:Clide.Solution.SolutionNodeKind.Folder">
            <summary>
            The node is a project folder.
            </summary>
        </member>
        <member name="F:Clide.Solution.SolutionNodeKind.Item">
            <summary>
            The node is a project item.
            </summary>
        </member>
        <member name="F:Clide.Solution.SolutionNodeKind.Reference">
            <summary>
            The node is a reference in a project.
            </summary>
        </member>
        <member name="F:Clide.Solution.SolutionNodeKind.ReferencesFolder">
            <summary>
            The node is the references folder.
            </summary>
        </member>
        <member name="F:Clide.Solution.SolutionNodeKind.Custom">
            <summary>
            The node is of a custom kind.
            </summary>
        </member>
        <member name="T:Clide.TracingExtensions">
            <summary>
            Provides tracing extensions on top of <see cref="T:Clide.Diagnostics.ITracer"/>.
            </summary>
        </member>
        <member name="M:Clide.TracingExtensions.ShieldUI(Clide.Diagnostics.ITracer,System.Action,System.String,System.String[])">
            <summary>
            Executes the given <paramref name="action"/> shielding any non-critical exceptions 
            and logging them to the <paramref name="tracer"/> with the given <paramref name="format"/> message.
            </summary>
        </member>
        <member name="M:Clide.TracingExtensions.ShieldUI(Clide.Diagnostics.ITracer,System.Action,System.String)">
            <summary>
            Executes the given <paramref name="action"/> shielding any non-critical exceptions 
            and logging them to the <paramref name="tracer"/> with the given <paramref name="errorMessage"/> message.
            </summary>
        </member>
        <member name="M:Clide.TracingExtensions.Error(Clide.Diagnostics.ITracer,System.Exception,System.String,System.Func{System.Boolean})">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Error"/> with the given exception and message and 
            adds an error to the error list that will be handled by the provided function.
            </summary>
            <param name="tracer">The tracer that will perform the error logging.</param>
            <param name="exception">The exception that will be logged.</param>
            <param name="text">The message to log.</param>
            <param name="handler">A callback function to call when the user selects the error in the error list. 
            The return value determines if the error has been fixed and can be deleted from the 
            error list (<see langword="true"/>) or not.
            </param>
            <remarks>
            This overload adds an error to the error list, and allows a callback to run when the user double-clicks
            the error in the error list. The function return value determines if the error will be cleared from the 
            list after the handler finishes running or not.
            </remarks>
        </member>
        <member name="M:Clide.TracingExtensions.Error(Clide.Diagnostics.ITracer,System.String,System.Func{System.Boolean})">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Error"/> with the given message and
            adds an error to the error list that will be handled by the provided function.
            </summary>
            <param name="tracer">The tracer that will perform the error logging.</param>
            <param name="text">The message to log.</param>
            <param name="handler">A callback function to call when the user selects the error in the error list. 
            The return value determines if the error has been fixed and can be deleted from the 
            error list (<see langword="true"/>) or not.
            </param>
            <remarks>
            This overload adds an error to the error list, and allows a callback to run when the user double-clicks
            the error in the error list. The function return value determines if the error will be cleared from the 
            list after the handler finishes running or not.
            </remarks>
        </member>
        <member name="M:Clide.TracingExtensions.Warn(Clide.Diagnostics.ITracer,System.Exception,System.String,System.Func{System.Boolean})">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Warning"/> with the given exception and 
            message and adds an error to the error list that will be handled by the provided function.
            </summary>
            <param name="tracer">The tracer that will perform the warning logging.</param>
            <param name="exception">The exception that will be logged.</param>
            <param name="text">The message to log.</param>
            <param name="handler">A callback function to call when the user selects the error in the error list. 
            The return value determines if the error has been fixed and can be deleted from the 
            error list (<see langword="true"/>) or not.
            </param>
            <remarks>
            This overload adds an error to the error list, and allows a callback to run when the user double-clicks
            the error in the error list. The function return value determines if the error will be cleared from the 
            list after the handler finishes running or not.
            </remarks>
        </member>
        <member name="M:Clide.TracingExtensions.Warn(Clide.Diagnostics.ITracer,System.String,System.Func{System.Boolean})">
            <summary>
            Traces an event of type <see cref="F:System.Diagnostics.TraceEventType.Warning"/> with the given message and 
            adds an error to the error list that will be handled by the provided action.
            </summary>
            <param name="tracer">The tracer that will perform the warning logging.</param>
            <param name="text">The message to log.</param>
            <param name="handler">A callback function to call when the user selects the error in the error list. 
            The return value determines if the error has been fixed and can be deleted from the 
            error list (<see langword="true"/>) or not.
            </param>
            <remarks>
            This overload adds an error to the error list, and allows a callback to run when the user double-clicks
            the error in the error list. The function return value determines if the error will be cleared from the 
            list after the handler finishes running or not.
            </remarks>
        </member>
        <member name="P:Clide.TracingExtensions.ErrorsManager">
            <summary>
            Gets or sets the errors manager to use to add errors to the error list.
            This is an ambient singleton, so  it is safe to replace it in multi-threaded test runs.
            </summary>
        </member>
        <member name="P:Clide.TracingExtensions.ShowExceptionAction">
            <summary>
            Gets or sets the action that is used to show error messages to 
            the user. The signature has the exception being thrown, a 
            message or format string, and optional formatting arguments.
            </summary>
        </member>
        <member name="T:Clide.ITreeNodeFactoryMetadata">
            <summary>
            Metadata interface for <see cref="T:Clide.ITreeNodeFactory`1"/> that 
            specifies whether the factory is a fallback one or not.
            </summary>
            <remarks>
            See <see cref="T:Clide.TreeNodeFactoryAttribute"/>.
            </remarks>
        </member>
        <member name="P:Clide.ITreeNodeFactoryMetadata.IsFallback">
            <summary>
            Gets a value indicating whether the factory is meant 
            to provide fallback behavior.
            </summary>
        </member>
        <member name="T:Clide.UIThread">
            <summary>
            Default UI thread invoker implementation, which uses the 
            current <see cref="P:System.Windows.Threading.Dispatcher.CurrentDispatcher"/> by default 
            or the one initialized from the host.
            </summary>
        </member>
        <member name="T:Clide.InputBox">
            <summary>
            Interaction logic for InputBox.xaml
            </summary>
            <summary>
            InputBox
            </summary>
        </member>
        <member name="M:Clide.InputBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.InputBox"/> class.
            </summary>
        </member>
        <member name="M:Clide.InputBox.Show(System.String,System.Windows.Window)">
            <summary>
            Shows the input box to the user with the specified message.
            </summary>
            <param name="message">The message to show.</param>
            <param name="owner">The window owner.</param>
            <returns></returns>
        </member>
        <member name="M:Clide.InputBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Clide.InputBox.ResponseText">
            <summary>
            Gets or sets the response text.
            </summary>
        </member>
        <member name="P:Clide.InputBox.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="T:Clide.VisualStudio.VsHierarchyItem">
            <summary>
            Represents the combination of a Visual Studio hierarchy 
            and an item identifier.
            </summary>
        </member>
        <member name="M:Clide.VisualStudio.VsHierarchyItem.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Clide.VisualStudio.VsHierarchyItem"/> class.
            </summary>
            <param name="hierarchy">The hierarchy.</param>
            <param name="itemId">The item id.</param>
        </member>
        <member name="P:Clide.VisualStudio.VsHierarchyItem.Hierarchy">
            <summary>
            Gets the hierarchy.
            </summary>
        </member>
        <member name="P:Clide.VisualStudio.VsHierarchyItem.ItemId">
            <summary>
            Gets the item id.
            </summary>
        </member>
    </members>
</doc>
