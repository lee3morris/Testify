<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EntityFramework.Triggers</name>
    </assembly>
    <members>
        <member name="T:EntityFramework.Triggers.DbContextWithTriggers">
            <summary>
            A <see cref="T:System.Data.Entity.DbContext"/> class with <see cref="T:EntityFramework.Triggers.Triggers`1"/> support
            </summary>
        </member>
        <member name="M:EntityFramework.Triggers.DbContextWithTriggers.#ctor">
            <summary>
                Constructs a new context instance using conventions to create the name of the
                database to which a connection will be made. The by-convention name is the full
                name (namespace + class name) of the derived context class. See the class remarks
                for how this is used to create a connection.
            </summary>
        </member>
        <member name="M:EntityFramework.Triggers.DbContextWithTriggers.#ctor(System.Data.Entity.Infrastructure.DbCompiledModel)">
            <summary>
                Constructs a new context instance using conventions to create the name of the
                database to which a connection will be made, and initializes it from the given
                model. The by-convention name is the full name (namespace + class name) of the
                derived context class. See the class remarks for how this is used to create a
                connection.
            </summary>
            <param name="model">The model that will back this context.</param>
        </member>
        <member name="M:EntityFramework.Triggers.DbContextWithTriggers.#ctor(System.String)">
            <summary>
                Constructs a new context instance using the given string as the name or connection
                string for the database to which a connection will be made. See the class remarks
                for how this is used to create a connection.
            </summary>
            <param name="nameOrConnectionString">Either the database name or a connection string.</param>
        </member>
        <member name="M:EntityFramework.Triggers.DbContextWithTriggers.#ctor(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
                Constructs a new context instance using the existing connection to connect to
                a database. The connection will not be disposed when the context is disposed
                if contextOwnsConnection is false.
            </summary>
            <param name="existingConnection">An existing connection to use for the new context.</param>
            <param name="contextOwnsConnection">If set to true the connection is disposed when the context is disposed, otherwise the caller must dispose the connection.</param>
        </member>
        <member name="M:EntityFramework.Triggers.DbContextWithTriggers.#ctor(System.Data.Entity.Core.Objects.ObjectContext,System.Boolean)">
            <summary>
                Constructs a new context instance around an existing ObjectContext.
            </summary>
            <param name="objectContext">An existing ObjectContext to wrap with the new context.</param>
            <param name="dbContextOwnsObjectContext">If set to true the ObjectContext is disposed when the DbContext is disposed, otherwise the caller must dispose the connection.</param>
        </member>
        <member name="M:EntityFramework.Triggers.DbContextWithTriggers.#ctor(System.String,System.Data.Entity.Infrastructure.DbCompiledModel)">
            <summary>
                Constructs a new context instance using the given string as the name or connection
                string for the database to which a connection will be made, and initializes it
                from the given model. See the class remarks for how this is used to create a
                connection.
            </summary>
            <param name="nameOrConnectionString">Either the database name or a connection string.</param>
            <param name="model">The model that will back this context.</param>
        </member>
        <member name="M:EntityFramework.Triggers.DbContextWithTriggers.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)">
            <summary>
                Constructs a new context instance using the existing connection to connect to
                a database, and initializes it from the given model. The connection will not
                be disposed when the context is disposed if contextOwnsConnection is false.
            </summary>
            <param name="existingConnection">An existing connection to use for the new context.</param>
            <param name="model">The model that will back this context.</param>
            <param name="contextOwnsConnection">If set to true the connection is disposed when the context is disposed, otherwise the caller must dispose the connection.</param>
        </member>
        <member name="M:EntityFramework.Triggers.Extensions.Triggers``1(``0)">
            <summary>
            Retrieve the <see cref="T:Triggers`1{TTriggerable}"/> object that contains the trigger events for this <see cref="T:EntityFramework.Triggers.ITriggerable"/>
            </summary>
            <typeparam name="TTriggerable"></typeparam>
            <param name="triggerable"></param>
            <returns></returns>
        </member>
        <member name="M:EntityFramework.Triggers.Extensions.SaveChangesWithTriggers``1(``0)">
            <summary>
            Saves all changes made in this context to the underlying database, firing trigger events accordingly.
            </summary>
            <param name="dbContext"></param>
            <example>this.SaveChangesWithTriggers();</example>
            <returns>The number of objects written to the underlying database.</returns>
        </member>
        <member name="M:EntityFramework.Triggers.Extensions.SaveChangesWithTriggersAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously saves all changes made in this context to the underlying database, firing trigger events accordingly.
            </summary>
            <param name="dbContext"></param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <example>this.SaveChangesWithTriggersAsync();</example>
            <returns>A task that represents the asynchronous save operation. The task result contains the number of objects written to the underlying database.</returns>
        </member>
        <member name="T:EntityFramework.Triggers.IEntry`2">
            <summary>Contains the context and the instance of the changed entity</summary>
        </member>
        <member name="P:EntityFramework.Triggers.IChangeEntry`2.Original">
            <summary>A typed wrapper around DbEntityEntry.OriginalValues</summary>
        </member>
        <member name="E:EntityFramework.Triggers.ITriggers`1.Inserting">
            <summary>Raised just before this entity is added to the store</summary>
        </member>
        <member name="E:EntityFramework.Triggers.ITriggers`1.Updating">
            <summary>Raised just before this entity is updated in the store</summary>
        </member>
        <member name="E:EntityFramework.Triggers.ITriggers`1.Deleting">
            <summary>Raised just before this entity is deleted from the store</summary>
        </member>
        <member name="E:EntityFramework.Triggers.ITriggers`1.InsertFailed">
            <summary>Raised after Inserting event, but before Inserted event when an exception has occured while saving the changes to the store</summary>
        </member>
        <member name="E:EntityFramework.Triggers.ITriggers`1.UpdateFailed">
            <summary>Raised after Updating event, but before Updated event when an exception has occured while saving the changes to the store</summary>
        </member>
        <member name="E:EntityFramework.Triggers.ITriggers`1.DeleteFailed">
            <summary>Raised after Deleting event, but before Deleted event when an exception has occured while saving the changes to the store</summary>
        </member>
        <member name="E:EntityFramework.Triggers.ITriggers`1.Inserted">
            <summary>Raised just after this entity is added to the store</summary>
        </member>
        <member name="E:EntityFramework.Triggers.ITriggers`1.Updated">
            <summary>Raised just after this entity is updated in the store</summary>
        </member>
        <member name="E:EntityFramework.Triggers.ITriggers`1.Deleted">
            <summary>Raised just after this entity is deleted from the store</summary>
        </member>
        <member name="E:EntityFramework.Triggers.ITriggers`2.Inserting">
            <summary>Raised just before this entity is added to the store</summary>
        </member>
        <member name="E:EntityFramework.Triggers.ITriggers`2.Updating">
            <summary>Raised just before this entity is updated in the store</summary>
        </member>
        <member name="E:EntityFramework.Triggers.ITriggers`2.Deleting">
            <summary>Raised just before this entity is deleted from the store</summary>
        </member>
        <member name="E:EntityFramework.Triggers.ITriggers`2.InsertFailed">
            <summary>Raised after Inserting event, but before Inserted event when an exception has occured while saving the changes to the store</summary>
        </member>
        <member name="E:EntityFramework.Triggers.ITriggers`2.UpdateFailed">
            <summary>Raised after Updating event, but before Updated event when an exception has occured while saving the changes to the store</summary>
        </member>
        <member name="E:EntityFramework.Triggers.ITriggers`2.DeleteFailed">
            <summary>Raised after Deleting event, but before Deleted event when an exception has occured while saving the changes to the store</summary>
        </member>
        <member name="E:EntityFramework.Triggers.ITriggers`2.Inserted">
            <summary>Raised just after this entity is added to the store</summary>
        </member>
        <member name="E:EntityFramework.Triggers.ITriggers`2.Updated">
            <summary>Raised just after this entity is updated in the store</summary>
        </member>
        <member name="E:EntityFramework.Triggers.ITriggers`2.Deleted">
            <summary>Raised just after this entity is deleted from the store</summary>
        </member>
    </members>
</doc>
