<UserControl 
  x:Class="Leem.Testify.SummaryViewControl"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:local="clr-namespace:Leem.Testify"
  >
  <DockPanel>
    <TextBlock DockPanel.Dock="Bottom" TextWrapping="Wrap" FontSize="12">
      When a top-level item (a Region) is expanded for the first time, its list of States 
      is dynamically loaded.  When a State is expanded for the first time, its Cities are
      loaded.  This deferred loading takes place in the ViewModel classes, and the
      TreeView displays the new objects due to data binding.
    </TextBlock>
    <TreeView ItemsSource="{Binding Modules}">
      <TreeView.ItemContainerStyle>
        <!-- 
        This Style binds a TreeViewItem to a TreeViewItemViewModel. 
        -->
<Style TargetType="TreeViewItem"
       BasedOn="{StaticResource {x:Type TreeViewItem}}">
  <Setter Property="HorizontalContentAlignment"
          Value="Stretch" />
  <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
  <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
  <Setter Property="FontWeight" Value="Normal" />
  <Setter Property="Template">
    <Setter.Value>
      <ControlTemplate TargetType="TreeViewItem">
        <StackPanel>
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"   MinWidth="19" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition />
            </Grid.RowDefinitions>
            
                             <!--Note that the following do not work, but I believe the top 2 should?!-->
                             <!--<ToggleButton IsChecked="{TemplateBinding IsExpanded}" ClickMode="Press" Name="Expander">-->
                             <!--<ToggleButton IsChecked="{TemplateBinding Property=IsExpanded}" ClickMode="Press" Name="Expander">-->
                             <!--<ToggleButton IsChecked="{TemplateBinding Path=IsExpanded}" ClickMode="Press" Name="Expander">-->
                        
            <ToggleButton IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                          ClickMode="Press"
                          Name="Expander">
              <ToggleButton.Style>
                <Style TargetType="ToggleButton">
                  <Setter Property="UIElement.Focusable"
                          Value="false" />
                  <Setter Property="FrameworkElement.Width"
                          Value="16" />
                  <Setter Property="FrameworkElement.Height"
                          Value="16" />
                  <Setter Property="Control.Template">
                    <Setter.Value>
                      <ControlTemplate TargetType="ToggleButton">
                        <Border Padding="5,5,5,5"
                                Background="#00FFFFFF"
                                Width="16"
                                Height="16">
                          <Path Fill="#00FFFFFF"
                                Stroke="#FF989898"
                                Name="ExpandPath">
                            <Path.Data>
                              <PathGeometry Figures="M0,0L0,6L6,0z" />
                            </Path.Data>
                            <Path.RenderTransform>
                              <RotateTransform Angle="135"
                                               CenterX="3"
                                               CenterY="3" />
                            </Path.RenderTransform>
                          </Path>
                        </Border>
                        <ControlTemplate.Triggers>
                          <Trigger Property="UIElement.IsMouseOver"
                                   Value="True">
                            <Setter TargetName="ExpandPath"
                                    Property="Shape.Stroke"
                                    Value="#FF1BBBFA" />
                            <Setter TargetName="ExpandPath"
                                    Property="Shape.Fill"
                                    Value="#00FFFFFF" />
                          </Trigger>
                          <Trigger Property="ToggleButton.IsChecked"
                                   Value="True">
                            <Setter TargetName="ExpandPath"
                                    Property="UIElement.RenderTransform">
                              <Setter.Value>
                                <RotateTransform Angle="180"
                                                 CenterX="3"
                                                 CenterY="3" />
                              </Setter.Value>
                            </Setter>
                            <Setter TargetName="ExpandPath"
                                    Property="Shape.Fill"
                                    Value="#FF595959" />
                            <Setter TargetName="ExpandPath"
                                    Property="Shape.Stroke"
                                    Value="#FF262626" />
                          </Trigger>
                        </ControlTemplate.Triggers>
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </Style>
              </ToggleButton.Style>
            </ToggleButton>
            <Border x:Name="Bd"
                    HorizontalAlignment="Stretch"
                    BorderThickness="{TemplateBinding Border.BorderThickness}"
                    BorderBrush="{TemplateBinding Border.BorderBrush}"
                    Padding="{TemplateBinding Control.Padding}"
                    Background="{TemplateBinding Panel.Background}"
                    SnapsToDevicePixels="True"
                    Grid.Column="1">
              <ContentPresenter x:Name="PART_Header"
                                Content="{TemplateBinding HeaderedContentControl.Header}"
                                ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                ContentSource="Header"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
            </Border>
            <ItemsPresenter x:Name="ItemsHost"
                            Grid.Column="1"
                            Grid.Row="1" />
          </Grid>
        </StackPanel>
        <ControlTemplate.Triggers>
          <Trigger Property="TreeViewItem.IsExpanded"
                   Value="False">
            <Setter TargetName="ItemsHost"
                    Property="UIElement.Visibility"
                    Value="Collapsed" />
          </Trigger>
          <Trigger Property="ItemsControl.HasItems"
                   Value="False">
            <Setter TargetName="Expander"
                    Property="UIElement.Visibility"
                    Value="Hidden" />
          </Trigger>
          <Trigger Property="TreeViewItem.IsSelected"
                   Value="True">
            <Setter TargetName="Bd"
                    Property="Panel.Background"
                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter Property="TextElement.Foreground"
                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
          </Trigger>
          <MultiTrigger>
            <MultiTrigger.Conditions>
              <Condition Property="TreeViewItem.IsSelected"
                         Value="True" />
              <Condition Property="Selector.IsSelectionActive"
                         Value="False" />
            </MultiTrigger.Conditions>
            <Setter TargetName="Bd"
                    Property="Panel.Background"
                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
            <Setter Property="TextElement.Foreground"
                    Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
          </MultiTrigger>
          <Trigger Property="UIElement.IsEnabled"
                   Value="False">
            <Setter Property="TextElement.Foreground"
                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
          </Trigger>
        </ControlTemplate.Triggers>
      </ControlTemplate>
    </Setter.Value>
  </Setter>
</Style>
      </TreeView.ItemContainerStyle>

      <TreeView.Resources>
        <HierarchicalDataTemplate 
            DataType="{x:Type local:ModuleViewModel}" 
            ItemsSource="{Binding Children}"
            >
            <StackPanel Orientation="Horizontal">
            <!--<Image Width="16" Height="16" Margin="3,0" Source="Images\Region.png" />-->
            <DockPanel LastChildFill="False">
                            <TextBlock DockPanel.Dock="Left" Text="{Binding ModuleName}" />

                                <!--<Image Source="/WpfTutorialSamples;component/Images/group.png" Margin="0,0,5,0" />-->
                         
                    <Grid >
                        <ProgressBar DockPanel.Dock="Right" 
                                    HorizontalAlignment="Right"
		                            Height="10"
		                            Margin="10,0,0,0"
		                            VerticalAlignment="Center"
		                            Width="100"
		                            Name="pbCoverage"
                                    Value="{Binding SequenceCoverage, Mode=OneTime}"
		                            Foreground="Green"
                                    Background="Red"/>
                        <TextBlock Text="{Binding ElementName=pbCoverage, Path=Value, StringFormat={}{0:0}%}" HorizontalAlignment="Center" VerticalAlignment="Center" MaxWidth="30"/>
                    </Grid>
                </DockPanel>
            </StackPanel>
       
        </HierarchicalDataTemplate>

        <HierarchicalDataTemplate 
          DataType="{x:Type local:ClassViewModel}" 
          ItemsSource="{Binding Children}"
          >
          <StackPanel Orientation="Horizontal" >
            <!--<Image Width="16" Height="16" Margin="3,0" Source="Images\State.png" />-->
                 <DockPanel LastChildFill="False">
                            <TextBlock DockPanel.Dock="Left" Text="{Binding ClassName}" />
                <!--<StackPanel Orientation="Horizontal">-->
                    <!--<Image Source="/WpfTutorialSamples;component/Images/group.png" Margin="0,0,5,0" />-->

                    <Grid >
                      <ProgressBar DockPanel.Dock="Right" 
		                            Height="10"
		                            Margin="10,0,0,0"
		                            VerticalAlignment="Center"
		                            Width="100"
		                            Name="pbCoverage"
                                    Value="{Binding SequenceCoverage, Mode=OneTime}"
		                            Foreground="Green"
                                    Background="Red"/>
                                <TextBlock Grid.Column="1" Text="{Binding ElementName=pbCoverage, Path=Value, StringFormat={}{0:0}%}" HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Grid>
                      
                    <!--</StackPanel>-->
                </DockPanel>
            </StackPanel>
        </HierarchicalDataTemplate>

        <DataTemplate DataType="{x:Type local:MethodViewModel}">
          <StackPanel Orientation="Horizontal">
            <DockPanel LastChildFill="False">
                <!--<Image Width="16" Height="16" Margin="3,0" Source="Images\City.png" />-->
             <TextBlock DockPanel.Dock="Left" Text="{Binding MethodName}" />
                <!--<StackPanel Orientation="Horizontal">-->
                    <!--<Image Source="/WpfTutorialSamples;component/Images/group.png" Margin="0,0,5,0" />-->

                        <Grid >
                        <ProgressBar DockPanel.Dock="Right" 
                                    HorizontalAlignment="Right"
		                            Height="10"
		                            Margin="10,0,0,0"
                                        Padding="2,2,2,2"
		                            VerticalAlignment="Center"
		                            Width="100"
		                            Name="pbCoverage"
                                    Value="{Binding SequenceCoverage, Mode=OneTime}"
		                            Foreground="Green"
                                    Background="Red"/>
                        <TextBlock Text="{Binding ElementName=pbCoverage, Path=Value, StringFormat={}{0:0}%}" HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Grid>

                    <!--</StackPanel>-->
                </DockPanel>
            </StackPanel>
        </DataTemplate>
      </TreeView.Resources>
    </TreeView>
    </DockPanel>
    
</UserControl>