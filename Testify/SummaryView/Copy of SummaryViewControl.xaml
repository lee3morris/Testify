<!--<UserControl
  x:Class="Leem.Testify.SummaryViewControl"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:local="clr-namespace:Leem.Testify"
  xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase"
  >
  <DockPanel>
    <TextBlock DockPanel.Dock="Bottom" TextWrapping="Wrap" FontSize="12">
      When a top-level item (a Region) is expanded for the first time, its list of States
      is dynamically loaded.  When a State is expanded for the first time, its Cities are
      loaded.  This deferred loading takes place in the ViewModel classes, and the
      TreeView displays the new objects due to data binding.
    </TextBlock>
    <TreeView ItemsSource="{Binding Modules}">
      <TreeView.ItemContainerStyle>
        --><!-- 
        This Style binds a TreeViewItem to a TreeViewItemViewModel. 
        --><!--
        <Style TargetType="{x:Type TreeViewItem}">
          <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
          <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
          <Setter Property="FontWeight" Value="Normal" />
          <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter Property="FontWeight" Value="Bold" />
            </Trigger>
          </Style.Triggers>
        </Style>
      </TreeView.ItemContainerStyle>

      <TreeView.Resources>

        <HierarchicalDataTemplate
    DataType="{x:Type local:ModuleViewModel}"
    ItemsSource="{Binding Children}"
            >
          <DockPanel LastChildFill="False">
            <TextBlock DockPanel.Dock="Left" Text="{Binding ModuleName}" />
            <Grid DockPanel.Dock="Right" IsSharedSizeScope="True">
              <ProgressBar
                          HorizontalAlignment="Right"
                      Height="10"
                      Margin="10,0,0,0"
                      VerticalAlignment="Center"
                      Width="100"
                      Name="pbCoverage"
                          Value="{Binding SequenceCoverage, Mode=OneTime}"
                      Foreground="Green"
                          Background="Red"/>
              <TextBlock Text="{Binding ElementName=pbCoverage, Path=Value, StringFormat={}{0:0}%}" HorizontalAlignment="Center" VerticalAlignment="Center" MaxWidth="30"/>
            </Grid>
          </DockPanel>
          --><!--</StackPanel>--><!--

        </HierarchicalDataTemplate>

        <HierarchicalDataTemplate
          DataType="{x:Type local:ClassViewModel}"
          ItemsSource="{Binding Children}"
          >
          <DockPanel LastChildFill="False">

            <TextBlock DockPanel.Dock="Left" Text="{Binding ClassName}" />


            <Grid DockPanel.Dock="Right" IsSharedSizeScope="True">
              <ProgressBar HorizontalAlignment="Right"
                  Height="10"
                  Margin="10,0,0,0"
                  VerticalAlignment="Center"
                  Width="100"
                  Name="pbCoverage"
                      Value="{Binding SequenceCoverage, Mode=OneTime}"
                  Foreground="Green"
                      Background="Red"/>
              <TextBlock Grid.Column="1" Text="{Binding ElementName=pbCoverage, Path=Value, StringFormat={}{0:0}%}" HorizontalAlignment="Center" VerticalAlignment="Center" />
            </Grid>

          </DockPanel>

        </HierarchicalDataTemplate>

        <DataTemplate DataType="{x:Type local:MethodViewModel}">
          <DockPanel LastChildFill="False">
            <TextBlock DockPanel.Dock="Left" Text="{Binding Name}" />


            <Grid DockPanel.Dock="Right" IsSharedSizeScope="True">
              <ProgressBar
                          HorizontalAlignment="Right"
                      Height="10"
                      Margin="10,0,0,0"
                              Padding="2,2,2,2"
                      VerticalAlignment="Center"
                      Width="100"
                      Name="pbCoverage"
                          Value="{Binding SequenceCoverage, Mode=OneTime}"
                      Foreground="Green"
                          Background="Red"/>
              <TextBlock Text="{Binding ElementName=pbCoverage, Path=Value, StringFormat={}{0:0}%}" HorizontalAlignment="Center" VerticalAlignment="Center" />
            </Grid>


          </DockPanel>

        </DataTemplate>
        <Style x:Key="ExpandCollapseToggleStyle"
   TargetType="{x:Type ToggleButton}">
          <Setter Property="Focusable"
    Value="False"/>
          <Setter Property="Width"
    Value="19"/>
          <Setter Property="Height"
    Value="13"/>
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type ToggleButton}">
                <Border Width="19"
    Height="13"
    Background="Transparent">
                  <Border Width="9"
    Height="9"
    BorderThickness="1"
    BorderBrush="#FF7898B5"
    CornerRadius="1"
    SnapsToDevicePixels="true">
                    <Border.Background>
                      <LinearGradientBrush StartPoint="0,0"
                 EndPoint="1,1">
                        <LinearGradientBrush.GradientStops>
                          <GradientStop Color="White"
          Offset=".2"/>
                          <GradientStop Color="#FFC0B7A6"
          Offset="1"/>
                        </LinearGradientBrush.GradientStops>
                      </LinearGradientBrush>
                    </Border.Background>
                    <Path x:Name="ExpandPath"
  Margin="1,1,1,1"
  Fill="Black"
  Data="M 0 2 L 0 3 L 2 3 L 2 5 L 3 5 L 3 3 
                            L 5 3 L 5 2 L 3 2 L 3 0 L 2 0 L 2 2 Z"/>
                  </Border>
                </Border>
                <ControlTemplate.Triggers>
                  <Trigger Property="IsChecked"
     Value="True">
                    <Setter Property="Data"
    TargetName="ExpandPath"
    Value="M 0 2 L 0 3 L 5 3 L 5 2 Z"/>
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>

        <local:LevelToIndentConverter x:Key="LevelToIndentConverter"/>

        --><!--<DataTemplate x:Key="CellTemplate_Name">
                    <DockPanel>
                        <ToggleButton x:Name="Expander" 
                      Style="{StaticResource ExpandCollapseToggleStyle}" 
                      Margin="{Binding Level, Converter={StaticResource LevelToIndentConverter},
                             RelativeSource={RelativeSource AncestorType= {x:Type local:TreeListViewItem}}}"
                      IsChecked="{Binding Path=IsExpanded,
                                 RelativeSource={RelativeSource AncestorType= {x:Type local:TreeListViewItem}}}"
                      ClickMode="Press"/>
                        <TextBlock Text="{Binding Name}"/>
                    </DockPanel>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=HasItems,
                               RelativeSource={RelativeSource  AncestorType={x:Type local:TreeListViewItem}}}" 
                     Value="False">
                            <Setter TargetName="Expander"
                  Property="Visibility"
                  Value="Hidden"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>--><!--


      </TreeView.Resources>

    </TreeView>
  </DockPanel>
  <UserControl.Resources>

  </UserControl.Resources>
</UserControl>-->